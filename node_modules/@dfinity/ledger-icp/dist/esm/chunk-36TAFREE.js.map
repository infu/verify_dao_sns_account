{
  "version": 3,
  "sources": ["../../src/ledger.canister.ts", "../../candid/ledger.certified.idl.js", "../../candid/ledger.idl.js", "../../src/canisters/ledger/ledger.request.converts.ts", "../../src/constants/constants.ts", "../../src/errors/ledger.errors.ts"],
  "sourcesContent": ["import type { ActorSubclass, Agent } from \"@dfinity/agent\";\nimport type { Principal } from \"@dfinity/principal\";\nimport { createServices } from \"@dfinity/utils\";\nimport type { _SERVICE as LedgerService } from \"../candid/ledger\";\nimport { idlFactory as certifiedIdlFactory } from \"../candid/ledger.certified.idl\";\nimport { idlFactory } from \"../candid/ledger.idl\";\nimport type { AccountIdentifier } from \"./account_identifier\";\nimport {\n  subAccountNumbersToSubaccount,\n  toICPTs,\n  toIcrc1TransferRawRequest,\n  toTransferRawRequest,\n} from \"./canisters/ledger/ledger.request.converts\";\nimport { MAINNET_LEDGER_CANISTER_ID } from \"./constants/canister_ids\";\nimport { TRANSACTION_FEE } from \"./constants/constants\";\nimport {\n  mapIcrc1TransferError,\n  mapTransferError,\n  mapTransferProtoError,\n} from \"./errors/ledger.errors\";\nimport type { BlockHeight } from \"./types/common\";\nimport type {\n  LedgerCanisterCall,\n  LedgerCanisterOptions,\n} from \"./types/ledger.options\";\nimport type { AccountBalanceParams } from \"./types/ledger.params\";\nimport type {\n  Icrc1TransferRequest,\n  TransferRequest,\n} from \"./types/ledger_converters\";\nimport { paramToAccountIdentifier } from \"./utils/params.utils\";\nimport { importNnsProto, queryCall, updateCall } from \"./utils/proto.utils\";\n\nexport class LedgerCanister {\n  private constructor(\n    private readonly agent: Agent,\n    private readonly canisterId: Principal,\n    private readonly service: ActorSubclass<LedgerService>,\n    private readonly certifiedService: ActorSubclass<LedgerService>,\n    private readonly updateFetcher: LedgerCanisterCall,\n    private readonly queryFetcher: LedgerCanisterCall,\n    private readonly hardwareWallet: boolean = false,\n  ) {}\n\n  public static create(options: LedgerCanisterOptions = {}) {\n    const canisterId: Principal =\n      options.canisterId ?? MAINNET_LEDGER_CANISTER_ID;\n\n    const { service, certifiedService, agent } = createServices<LedgerService>({\n      options: {\n        ...options,\n        canisterId,\n      },\n      idlFactory,\n      certifiedIdlFactory,\n    });\n\n    return new LedgerCanister(\n      agent,\n      canisterId,\n      service,\n      certifiedService,\n      options.updateCallOverride ?? updateCall,\n      options.queryCallOverride ?? queryCall,\n      options.hardwareWallet,\n    );\n  }\n\n  /**\n   * Returns the balance of the specified account identifier.\n   *\n   * If `certified` is true, the request is fetched as an update call, otherwise\n   * it is fetched using a query call.\n   *\n   * @param {AccountBalanceParams} params The parameters to get the balance of an account.\n   * @param {AccountIdentifierParam} params.accountIdentifier The account identifier provided either as hex string or as an AccountIdentifier.\n   * @param {boolean} params.certified query or update call.\n   * @returns {Promise<bigint>} The balance of the given account.\n   * @throws {@link Error}\n   */\n  public accountBalance = async ({\n    accountIdentifier: accountIdentifierParam,\n    certified = true,\n  }: AccountBalanceParams): Promise<bigint> => {\n    const accountIdentifier = paramToAccountIdentifier(accountIdentifierParam);\n\n    if (this.hardwareWallet) {\n      return this.accountBalanceHardwareWallet({\n        accountIdentifier,\n        certified,\n      });\n    }\n    const service = certified ? this.certifiedService : this.service;\n    const tokens = await service.account_balance({\n      account: accountIdentifier.toUint8Array(),\n    });\n    return tokens.e8s;\n  };\n\n  /**\n   * Returns the transaction fee of the ledger canister\n   * @returns {BigInt}\n   */\n  public transactionFee = async () => {\n    const {\n      transfer_fee: { e8s },\n    } = await this.service.transfer_fee({});\n    return e8s;\n  };\n\n  /**\n   * Transfer ICP from the caller to the destination `accountIdentifier`.\n   * Returns the index of the block containing the tx if it was successful.\n   *\n   * @throws {@link TransferError}\n   */\n  public transfer = async (request: TransferRequest): Promise<BlockHeight> => {\n    if (this.hardwareWallet) {\n      return this.transferHardwareWallet(request);\n    }\n    // When candid is implemented, the previous lines will go away.\n    // But the transaction fee method is not supported by Ledger App yet.\n    if (request.fee === undefined) {\n      request.fee = this.hardwareWallet\n        ? TRANSACTION_FEE\n        : await this.transactionFee();\n    }\n    const rawRequest = toTransferRawRequest(request);\n    const response = await this.certifiedService.transfer(rawRequest);\n    if (\"Err\" in response) {\n      throw mapTransferError(response.Err);\n    }\n    return response.Ok;\n  };\n\n  // WARNING: When using the ICRC-1 interface of the ICP ledger, there is no\n  // relationship between the memo and the icrc1Memo of a transaction. The\n  // ICRC-1 interface simply cannot set the memo field and the non-ICRC-1\n  // interface cannot set the icrc1Memo field, even though the icrc1Memo field\n  // is called just \"memo\" in canister method params.\n  /**\n   * Transfer ICP from the caller to the destination `Account`.\n   * Returns the index of the block containing the tx if it was successful.\n   *\n   * @throws {@link TransferError}\n   */\n  public icrc1Transfer = async (\n    request: Icrc1TransferRequest,\n  ): Promise<BlockHeight> => {\n    // The transaction fee method is not supported by Ledger App yet.\n    if (request.fee === undefined) {\n      request.fee = this.hardwareWallet\n        ? TRANSACTION_FEE\n        : await this.transactionFee();\n    }\n    const rawRequest = toIcrc1TransferRawRequest(request);\n    const response = await this.certifiedService.icrc1_transfer(rawRequest);\n    if (\"Err\" in response) {\n      throw mapIcrc1TransferError(response.Err);\n    }\n    return response.Ok;\n  };\n\n  private accountBalanceHardwareWallet = async ({\n    accountIdentifier,\n    certified = true,\n  }: {\n    accountIdentifier: AccountIdentifier;\n    certified?: boolean;\n  }): Promise<bigint> => {\n    const callMethod = certified ? this.updateFetcher : this.queryFetcher;\n\n    const { AccountBalanceRequest: AccountBalanceRequestConstructor, ICPTs } =\n      await importNnsProto();\n\n    const request = new AccountBalanceRequestConstructor();\n    request.setAccount(await accountIdentifier.toProto());\n\n    const responseBytes = await callMethod({\n      agent: this.agent,\n      canisterId: this.canisterId,\n      methodName: \"account_balance_pb\",\n      arg: request.serializeBinary(),\n    });\n\n    return BigInt(\n      ICPTs.deserializeBinary(new Uint8Array(responseBytes)).getE8s(),\n    );\n  };\n\n  private transferHardwareWallet = async ({\n    to,\n    amount,\n    memo,\n    fee,\n    fromSubAccount,\n    createdAt,\n  }: TransferRequest): Promise<BlockHeight> => {\n    const { SendRequest, Payment, Memo, TimeStamp, BlockHeight } =\n      await importNnsProto();\n\n    const request = new SendRequest();\n    request.setTo(await to.toProto());\n\n    const payment = new Payment();\n    payment.setReceiverGets(await toICPTs(amount));\n    request.setPayment(payment);\n\n    request.setMaxFee(await toICPTs(fee ?? TRANSACTION_FEE));\n\n    // Always explicitly set the memo for compatibility with ledger wallet - hardware wallet\n    const requestMemo = new Memo();\n    requestMemo.setMemo((memo ?? BigInt(0)).toString());\n    request.setMemo(requestMemo);\n\n    if (createdAt !== undefined) {\n      const timestamp = new TimeStamp();\n      timestamp.setTimestampNanos(createdAt.toString());\n      request.setCreatedAtTime(timestamp);\n    }\n\n    if (fromSubAccount !== undefined) {\n      request.setFromSubaccount(\n        await subAccountNumbersToSubaccount(fromSubAccount),\n      );\n    }\n\n    try {\n      const responseBytes = await this.updateFetcher({\n        agent: this.agent,\n        canisterId: this.canisterId,\n        methodName: \"send_pb\",\n        arg: request.serializeBinary(),\n      });\n\n      // Successful tx. Return the block height.\n      return BigInt(BlockHeight.deserializeBinary(responseBytes).getHeight());\n    } catch (err) {\n      if (err instanceof Error) {\n        throw mapTransferProtoError(err);\n      }\n\n      throw err;\n    }\n  };\n}\n", "/* Do not edit.  Compiled with ./scripts/compile-idl-js from packages/ledger-icp/candid/ledger.did */\nexport const idlFactory = ({ IDL }) => {\n  const SubAccount = IDL.Vec(IDL.Nat8);\n  const Account = IDL.Record({\n    'owner' : IDL.Principal,\n    'subaccount' : IDL.Opt(SubAccount),\n  });\n  const FeatureFlags = IDL.Record({ 'icrc2' : IDL.Bool });\n  const UpgradeArgs = IDL.Record({\n    'maximum_number_of_accounts' : IDL.Opt(IDL.Nat64),\n    'icrc1_minting_account' : IDL.Opt(Account),\n    'feature_flags' : IDL.Opt(FeatureFlags),\n  });\n  const Tokens = IDL.Record({ 'e8s' : IDL.Nat64 });\n  const TextAccountIdentifier = IDL.Text;\n  const Duration = IDL.Record({ 'secs' : IDL.Nat64, 'nanos' : IDL.Nat32 });\n  const ArchiveOptions = IDL.Record({\n    'num_blocks_to_archive' : IDL.Nat64,\n    'trigger_threshold' : IDL.Nat64,\n    'max_message_size_bytes' : IDL.Opt(IDL.Nat64),\n    'cycles_for_archive_creation' : IDL.Opt(IDL.Nat64),\n    'node_max_memory_size_bytes' : IDL.Opt(IDL.Nat64),\n    'controller_id' : IDL.Principal,\n  });\n  const InitArgs = IDL.Record({\n    'send_whitelist' : IDL.Vec(IDL.Principal),\n    'token_symbol' : IDL.Opt(IDL.Text),\n    'transfer_fee' : IDL.Opt(Tokens),\n    'minting_account' : TextAccountIdentifier,\n    'maximum_number_of_accounts' : IDL.Opt(IDL.Nat64),\n    'accounts_overflow_trim_quantity' : IDL.Opt(IDL.Nat64),\n    'transaction_window' : IDL.Opt(Duration),\n    'max_message_size_bytes' : IDL.Opt(IDL.Nat64),\n    'icrc1_minting_account' : IDL.Opt(Account),\n    'archive_options' : IDL.Opt(ArchiveOptions),\n    'initial_values' : IDL.Vec(IDL.Tuple(TextAccountIdentifier, Tokens)),\n    'token_name' : IDL.Opt(IDL.Text),\n    'feature_flags' : IDL.Opt(FeatureFlags),\n  });\n  const LedgerCanisterPayload = IDL.Variant({\n    'Upgrade' : IDL.Opt(UpgradeArgs),\n    'Init' : InitArgs,\n  });\n  const BlockIndex = IDL.Nat64;\n  const GetBlocksArgs = IDL.Record({\n    'start' : BlockIndex,\n    'length' : IDL.Nat64,\n  });\n  const Memo = IDL.Nat64;\n  const AccountIdentifier = IDL.Vec(IDL.Nat8);\n  const TimeStamp = IDL.Record({ 'timestamp_nanos' : IDL.Nat64 });\n  const Operation = IDL.Variant({\n    'Approve' : IDL.Record({\n      'fee' : Tokens,\n      'from' : AccountIdentifier,\n      'allowance_e8s' : IDL.Int,\n      'allowance' : Tokens,\n      'expires_at' : IDL.Opt(TimeStamp),\n      'spender' : AccountIdentifier,\n    }),\n    'Burn' : IDL.Record({\n      'from' : AccountIdentifier,\n      'amount' : Tokens,\n      'spender' : IDL.Opt(AccountIdentifier),\n    }),\n    'Mint' : IDL.Record({ 'to' : AccountIdentifier, 'amount' : Tokens }),\n    'Transfer' : IDL.Record({\n      'to' : AccountIdentifier,\n      'fee' : Tokens,\n      'from' : AccountIdentifier,\n      'amount' : Tokens,\n    }),\n    'TransferFrom' : IDL.Record({\n      'to' : AccountIdentifier,\n      'fee' : Tokens,\n      'from' : AccountIdentifier,\n      'amount' : Tokens,\n      'spender' : AccountIdentifier,\n    }),\n  });\n  const Transaction = IDL.Record({\n    'memo' : Memo,\n    'icrc1_memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'operation' : IDL.Opt(Operation),\n    'created_at_time' : TimeStamp,\n  });\n  const Block = IDL.Record({\n    'transaction' : Transaction,\n    'timestamp' : TimeStamp,\n    'parent_hash' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n  });\n  const BlockRange = IDL.Record({ 'blocks' : IDL.Vec(Block) });\n  const QueryArchiveError = IDL.Variant({\n    'BadFirstBlockIndex' : IDL.Record({\n      'requested_index' : BlockIndex,\n      'first_valid_index' : BlockIndex,\n    }),\n    'Other' : IDL.Record({\n      'error_message' : IDL.Text,\n      'error_code' : IDL.Nat64,\n    }),\n  });\n  const QueryArchiveResult = IDL.Variant({\n    'Ok' : BlockRange,\n    'Err' : QueryArchiveError,\n  });\n  const QueryArchiveFn = IDL.Func([GetBlocksArgs], [QueryArchiveResult], []);\n  const ArchivedBlocksRange = IDL.Record({\n    'callback' : QueryArchiveFn,\n    'start' : BlockIndex,\n    'length' : IDL.Nat64,\n  });\n  const QueryBlocksResponse = IDL.Record({\n    'certificate' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'blocks' : IDL.Vec(Block),\n    'chain_length' : IDL.Nat64,\n    'first_block_index' : BlockIndex,\n    'archived_blocks' : IDL.Vec(ArchivedBlocksRange),\n  });\n  const ArchivedEncodedBlocksRange = IDL.Record({\n    'callback' : IDL.Func(\n        [GetBlocksArgs],\n        [\n          IDL.Variant({\n            'Ok' : IDL.Vec(IDL.Vec(IDL.Nat8)),\n            'Err' : QueryArchiveError,\n          }),\n        ],\n        [],\n      ),\n    'start' : IDL.Nat64,\n    'length' : IDL.Nat64,\n  });\n  const QueryEncodedBlocksResponse = IDL.Record({\n    'certificate' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'blocks' : IDL.Vec(IDL.Vec(IDL.Nat8)),\n    'chain_length' : IDL.Nat64,\n    'first_block_index' : IDL.Nat64,\n    'archived_blocks' : IDL.Vec(ArchivedEncodedBlocksRange),\n  });\n  const AccountBalanceArgs = IDL.Record({ 'account' : AccountIdentifier });\n  const AccountBalanceArgsDfx = IDL.Record({\n    'account' : TextAccountIdentifier,\n  });\n  const Archive = IDL.Record({ 'canister_id' : IDL.Principal });\n  const Archives = IDL.Record({ 'archives' : IDL.Vec(Archive) });\n  const Icrc1Tokens = IDL.Nat;\n  const Value = IDL.Variant({\n    'Int' : IDL.Int,\n    'Nat' : IDL.Nat,\n    'Blob' : IDL.Vec(IDL.Nat8),\n    'Text' : IDL.Text,\n  });\n  const Icrc1Timestamp = IDL.Nat64;\n  const TransferArg = IDL.Record({\n    'to' : Account,\n    'fee' : IDL.Opt(Icrc1Tokens),\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'from_subaccount' : IDL.Opt(SubAccount),\n    'created_at_time' : IDL.Opt(Icrc1Timestamp),\n    'amount' : Icrc1Tokens,\n  });\n  const Icrc1BlockIndex = IDL.Nat;\n  const Icrc1TransferError = IDL.Variant({\n    'GenericError' : IDL.Record({\n      'message' : IDL.Text,\n      'error_code' : IDL.Nat,\n    }),\n    'TemporarilyUnavailable' : IDL.Null,\n    'BadBurn' : IDL.Record({ 'min_burn_amount' : Icrc1Tokens }),\n    'Duplicate' : IDL.Record({ 'duplicate_of' : Icrc1BlockIndex }),\n    'BadFee' : IDL.Record({ 'expected_fee' : Icrc1Tokens }),\n    'CreatedInFuture' : IDL.Record({ 'ledger_time' : IDL.Nat64 }),\n    'TooOld' : IDL.Null,\n    'InsufficientFunds' : IDL.Record({ 'balance' : Icrc1Tokens }),\n  });\n  const Icrc1TransferResult = IDL.Variant({\n    'Ok' : Icrc1BlockIndex,\n    'Err' : Icrc1TransferError,\n  });\n  const AllowanceArgs = IDL.Record({\n    'account' : Account,\n    'spender' : Account,\n  });\n  const Allowance = IDL.Record({\n    'allowance' : Icrc1Tokens,\n    'expires_at' : IDL.Opt(TimeStamp),\n  });\n  const ApproveArgs = IDL.Record({\n    'fee' : IDL.Opt(Icrc1Tokens),\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'from_subaccount' : IDL.Opt(SubAccount),\n    'created_at_time' : IDL.Opt(TimeStamp),\n    'amount' : Icrc1Tokens,\n    'expected_allowance' : IDL.Opt(Icrc1Tokens),\n    'expires_at' : IDL.Opt(TimeStamp),\n    'spender' : Account,\n  });\n  const ApproveError = IDL.Variant({\n    'GenericError' : IDL.Record({\n      'message' : IDL.Text,\n      'error_code' : IDL.Nat,\n    }),\n    'TemporarilyUnavailable' : IDL.Null,\n    'Duplicate' : IDL.Record({ 'duplicate_of' : Icrc1BlockIndex }),\n    'BadFee' : IDL.Record({ 'expected_fee' : Icrc1Tokens }),\n    'AllowanceChanged' : IDL.Record({ 'current_allowance' : Icrc1Tokens }),\n    'CreatedInFuture' : IDL.Record({ 'ledger_time' : IDL.Nat64 }),\n    'TooOld' : IDL.Null,\n    'Expired' : IDL.Record({ 'ledger_time' : IDL.Nat64 }),\n    'InsufficientFunds' : IDL.Record({ 'balance' : Icrc1Tokens }),\n  });\n  const ApproveResult = IDL.Variant({\n    'Ok' : Icrc1BlockIndex,\n    'Err' : ApproveError,\n  });\n  const SendArgs = IDL.Record({\n    'to' : TextAccountIdentifier,\n    'fee' : Tokens,\n    'memo' : Memo,\n    'from_subaccount' : IDL.Opt(SubAccount),\n    'created_at_time' : IDL.Opt(TimeStamp),\n    'amount' : Tokens,\n  });\n  const TransferArgs = IDL.Record({\n    'to' : AccountIdentifier,\n    'fee' : Tokens,\n    'memo' : Memo,\n    'from_subaccount' : IDL.Opt(SubAccount),\n    'created_at_time' : IDL.Opt(TimeStamp),\n    'amount' : Tokens,\n  });\n  const TransferError = IDL.Variant({\n    'TxTooOld' : IDL.Record({ 'allowed_window_nanos' : IDL.Nat64 }),\n    'BadFee' : IDL.Record({ 'expected_fee' : Tokens }),\n    'TxDuplicate' : IDL.Record({ 'duplicate_of' : BlockIndex }),\n    'TxCreatedInFuture' : IDL.Null,\n    'InsufficientFunds' : IDL.Record({ 'balance' : Tokens }),\n  });\n  const TransferResult = IDL.Variant({\n    'Ok' : BlockIndex,\n    'Err' : TransferError,\n  });\n  const TransferFeeArg = IDL.Record({});\n  const TransferFee = IDL.Record({ 'transfer_fee' : Tokens });\n  return IDL.Service({\n    '_blocks' : IDL.Func([GetBlocksArgs], [QueryBlocksResponse], []),\n    '_encoded_blocks' : IDL.Func(\n        [GetBlocksArgs],\n        [QueryEncodedBlocksResponse],\n        [],\n      ),\n    'account_balance' : IDL.Func([AccountBalanceArgs], [Tokens], []),\n    'account_balance_dfx' : IDL.Func([AccountBalanceArgsDfx], [Tokens], []),\n    'account_identifier' : IDL.Func([Account], [AccountIdentifier], []),\n    'archives' : IDL.Func([], [Archives], []),\n    'decimals' : IDL.Func([], [IDL.Record({ 'decimals' : IDL.Nat32 })], []),\n    'icrc1_balance_of' : IDL.Func([Account], [Icrc1Tokens], []),\n    'icrc1_decimals' : IDL.Func([], [IDL.Nat8], []),\n    'icrc1_fee' : IDL.Func([], [Icrc1Tokens], []),\n    'icrc1_metadata' : IDL.Func([], [IDL.Vec(IDL.Tuple(IDL.Text, Value))], []),\n    'icrc1_minting_account' : IDL.Func([], [IDL.Opt(Account)], []),\n    'icrc1_name' : IDL.Func([], [IDL.Text], []),\n    'icrc1_supported_standards' : IDL.Func(\n        [],\n        [IDL.Vec(IDL.Record({ 'url' : IDL.Text, 'name' : IDL.Text }))],\n        [],\n      ),\n    'icrc1_symbol' : IDL.Func([], [IDL.Text], []),\n    'icrc1_total_supply' : IDL.Func([], [Icrc1Tokens], []),\n    'icrc1_transfer' : IDL.Func([TransferArg], [Icrc1TransferResult], []),\n    'icrc2_allowance' : IDL.Func([AllowanceArgs], [Allowance], []),\n    'icrc2_approve' : IDL.Func([ApproveArgs], [ApproveResult], []),\n    'name' : IDL.Func([], [IDL.Record({ 'name' : IDL.Text })], []),\n    'send_dfx' : IDL.Func([SendArgs], [BlockIndex], []),\n    'symbol' : IDL.Func([], [IDL.Record({ 'symbol' : IDL.Text })], []),\n    'transfer' : IDL.Func([TransferArgs], [TransferResult], []),\n    'transfer_fee' : IDL.Func([TransferFeeArg], [TransferFee], []),\n  });\n};\nexport const init = ({ IDL }) => {\n  const SubAccount = IDL.Vec(IDL.Nat8);\n  const Account = IDL.Record({\n    'owner' : IDL.Principal,\n    'subaccount' : IDL.Opt(SubAccount),\n  });\n  const FeatureFlags = IDL.Record({ 'icrc2' : IDL.Bool });\n  const UpgradeArgs = IDL.Record({\n    'maximum_number_of_accounts' : IDL.Opt(IDL.Nat64),\n    'icrc1_minting_account' : IDL.Opt(Account),\n    'feature_flags' : IDL.Opt(FeatureFlags),\n  });\n  const Tokens = IDL.Record({ 'e8s' : IDL.Nat64 });\n  const TextAccountIdentifier = IDL.Text;\n  const Duration = IDL.Record({ 'secs' : IDL.Nat64, 'nanos' : IDL.Nat32 });\n  const ArchiveOptions = IDL.Record({\n    'num_blocks_to_archive' : IDL.Nat64,\n    'trigger_threshold' : IDL.Nat64,\n    'max_message_size_bytes' : IDL.Opt(IDL.Nat64),\n    'cycles_for_archive_creation' : IDL.Opt(IDL.Nat64),\n    'node_max_memory_size_bytes' : IDL.Opt(IDL.Nat64),\n    'controller_id' : IDL.Principal,\n  });\n  const InitArgs = IDL.Record({\n    'send_whitelist' : IDL.Vec(IDL.Principal),\n    'token_symbol' : IDL.Opt(IDL.Text),\n    'transfer_fee' : IDL.Opt(Tokens),\n    'minting_account' : TextAccountIdentifier,\n    'maximum_number_of_accounts' : IDL.Opt(IDL.Nat64),\n    'accounts_overflow_trim_quantity' : IDL.Opt(IDL.Nat64),\n    'transaction_window' : IDL.Opt(Duration),\n    'max_message_size_bytes' : IDL.Opt(IDL.Nat64),\n    'icrc1_minting_account' : IDL.Opt(Account),\n    'archive_options' : IDL.Opt(ArchiveOptions),\n    'initial_values' : IDL.Vec(IDL.Tuple(TextAccountIdentifier, Tokens)),\n    'token_name' : IDL.Opt(IDL.Text),\n    'feature_flags' : IDL.Opt(FeatureFlags),\n  });\n  const LedgerCanisterPayload = IDL.Variant({\n    'Upgrade' : IDL.Opt(UpgradeArgs),\n    'Init' : InitArgs,\n  });\n  return [LedgerCanisterPayload];\n};\n", "/* Do not edit.  Compiled with ./scripts/compile-idl-js from packages/ledger-icp/candid/ledger.did */\nexport const idlFactory = ({ IDL }) => {\n  const SubAccount = IDL.Vec(IDL.Nat8);\n  const Account = IDL.Record({\n    'owner' : IDL.Principal,\n    'subaccount' : IDL.Opt(SubAccount),\n  });\n  const FeatureFlags = IDL.Record({ 'icrc2' : IDL.Bool });\n  const UpgradeArgs = IDL.Record({\n    'maximum_number_of_accounts' : IDL.Opt(IDL.Nat64),\n    'icrc1_minting_account' : IDL.Opt(Account),\n    'feature_flags' : IDL.Opt(FeatureFlags),\n  });\n  const Tokens = IDL.Record({ 'e8s' : IDL.Nat64 });\n  const TextAccountIdentifier = IDL.Text;\n  const Duration = IDL.Record({ 'secs' : IDL.Nat64, 'nanos' : IDL.Nat32 });\n  const ArchiveOptions = IDL.Record({\n    'num_blocks_to_archive' : IDL.Nat64,\n    'trigger_threshold' : IDL.Nat64,\n    'max_message_size_bytes' : IDL.Opt(IDL.Nat64),\n    'cycles_for_archive_creation' : IDL.Opt(IDL.Nat64),\n    'node_max_memory_size_bytes' : IDL.Opt(IDL.Nat64),\n    'controller_id' : IDL.Principal,\n  });\n  const InitArgs = IDL.Record({\n    'send_whitelist' : IDL.Vec(IDL.Principal),\n    'token_symbol' : IDL.Opt(IDL.Text),\n    'transfer_fee' : IDL.Opt(Tokens),\n    'minting_account' : TextAccountIdentifier,\n    'maximum_number_of_accounts' : IDL.Opt(IDL.Nat64),\n    'accounts_overflow_trim_quantity' : IDL.Opt(IDL.Nat64),\n    'transaction_window' : IDL.Opt(Duration),\n    'max_message_size_bytes' : IDL.Opt(IDL.Nat64),\n    'icrc1_minting_account' : IDL.Opt(Account),\n    'archive_options' : IDL.Opt(ArchiveOptions),\n    'initial_values' : IDL.Vec(IDL.Tuple(TextAccountIdentifier, Tokens)),\n    'token_name' : IDL.Opt(IDL.Text),\n    'feature_flags' : IDL.Opt(FeatureFlags),\n  });\n  const LedgerCanisterPayload = IDL.Variant({\n    'Upgrade' : IDL.Opt(UpgradeArgs),\n    'Init' : InitArgs,\n  });\n  const AccountIdentifier = IDL.Vec(IDL.Nat8);\n  const AccountBalanceArgs = IDL.Record({ 'account' : AccountIdentifier });\n  const AccountBalanceArgsDfx = IDL.Record({\n    'account' : TextAccountIdentifier,\n  });\n  const Archive = IDL.Record({ 'canister_id' : IDL.Principal });\n  const Archives = IDL.Record({ 'archives' : IDL.Vec(Archive) });\n  const Icrc1Tokens = IDL.Nat;\n  const Value = IDL.Variant({\n    'Int' : IDL.Int,\n    'Nat' : IDL.Nat,\n    'Blob' : IDL.Vec(IDL.Nat8),\n    'Text' : IDL.Text,\n  });\n  const Icrc1Timestamp = IDL.Nat64;\n  const TransferArg = IDL.Record({\n    'to' : Account,\n    'fee' : IDL.Opt(Icrc1Tokens),\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'from_subaccount' : IDL.Opt(SubAccount),\n    'created_at_time' : IDL.Opt(Icrc1Timestamp),\n    'amount' : Icrc1Tokens,\n  });\n  const Icrc1BlockIndex = IDL.Nat;\n  const Icrc1TransferError = IDL.Variant({\n    'GenericError' : IDL.Record({\n      'message' : IDL.Text,\n      'error_code' : IDL.Nat,\n    }),\n    'TemporarilyUnavailable' : IDL.Null,\n    'BadBurn' : IDL.Record({ 'min_burn_amount' : Icrc1Tokens }),\n    'Duplicate' : IDL.Record({ 'duplicate_of' : Icrc1BlockIndex }),\n    'BadFee' : IDL.Record({ 'expected_fee' : Icrc1Tokens }),\n    'CreatedInFuture' : IDL.Record({ 'ledger_time' : IDL.Nat64 }),\n    'TooOld' : IDL.Null,\n    'InsufficientFunds' : IDL.Record({ 'balance' : Icrc1Tokens }),\n  });\n  const Icrc1TransferResult = IDL.Variant({\n    'Ok' : Icrc1BlockIndex,\n    'Err' : Icrc1TransferError,\n  });\n  const AllowanceArgs = IDL.Record({\n    'account' : Account,\n    'spender' : Account,\n  });\n  const TimeStamp = IDL.Record({ 'timestamp_nanos' : IDL.Nat64 });\n  const Allowance = IDL.Record({\n    'allowance' : Icrc1Tokens,\n    'expires_at' : IDL.Opt(TimeStamp),\n  });\n  const ApproveArgs = IDL.Record({\n    'fee' : IDL.Opt(Icrc1Tokens),\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'from_subaccount' : IDL.Opt(SubAccount),\n    'created_at_time' : IDL.Opt(TimeStamp),\n    'amount' : Icrc1Tokens,\n    'expected_allowance' : IDL.Opt(Icrc1Tokens),\n    'expires_at' : IDL.Opt(TimeStamp),\n    'spender' : Account,\n  });\n  const ApproveError = IDL.Variant({\n    'GenericError' : IDL.Record({\n      'message' : IDL.Text,\n      'error_code' : IDL.Nat,\n    }),\n    'TemporarilyUnavailable' : IDL.Null,\n    'Duplicate' : IDL.Record({ 'duplicate_of' : Icrc1BlockIndex }),\n    'BadFee' : IDL.Record({ 'expected_fee' : Icrc1Tokens }),\n    'AllowanceChanged' : IDL.Record({ 'current_allowance' : Icrc1Tokens }),\n    'CreatedInFuture' : IDL.Record({ 'ledger_time' : IDL.Nat64 }),\n    'TooOld' : IDL.Null,\n    'Expired' : IDL.Record({ 'ledger_time' : IDL.Nat64 }),\n    'InsufficientFunds' : IDL.Record({ 'balance' : Icrc1Tokens }),\n  });\n  const ApproveResult = IDL.Variant({\n    'Ok' : Icrc1BlockIndex,\n    'Err' : ApproveError,\n  });\n  const BlockIndex = IDL.Nat64;\n  const GetBlocksArgs = IDL.Record({\n    'start' : BlockIndex,\n    'length' : IDL.Nat64,\n  });\n  const Memo = IDL.Nat64;\n  const Operation = IDL.Variant({\n    'Approve' : IDL.Record({\n      'fee' : Tokens,\n      'from' : AccountIdentifier,\n      'allowance_e8s' : IDL.Int,\n      'allowance' : Tokens,\n      'expires_at' : IDL.Opt(TimeStamp),\n      'spender' : AccountIdentifier,\n    }),\n    'Burn' : IDL.Record({\n      'from' : AccountIdentifier,\n      'amount' : Tokens,\n      'spender' : IDL.Opt(AccountIdentifier),\n    }),\n    'Mint' : IDL.Record({ 'to' : AccountIdentifier, 'amount' : Tokens }),\n    'Transfer' : IDL.Record({\n      'to' : AccountIdentifier,\n      'fee' : Tokens,\n      'from' : AccountIdentifier,\n      'amount' : Tokens,\n    }),\n    'TransferFrom' : IDL.Record({\n      'to' : AccountIdentifier,\n      'fee' : Tokens,\n      'from' : AccountIdentifier,\n      'amount' : Tokens,\n      'spender' : AccountIdentifier,\n    }),\n  });\n  const Transaction = IDL.Record({\n    'memo' : Memo,\n    'icrc1_memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'operation' : IDL.Opt(Operation),\n    'created_at_time' : TimeStamp,\n  });\n  const Block = IDL.Record({\n    'transaction' : Transaction,\n    'timestamp' : TimeStamp,\n    'parent_hash' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n  });\n  const BlockRange = IDL.Record({ 'blocks' : IDL.Vec(Block) });\n  const QueryArchiveError = IDL.Variant({\n    'BadFirstBlockIndex' : IDL.Record({\n      'requested_index' : BlockIndex,\n      'first_valid_index' : BlockIndex,\n    }),\n    'Other' : IDL.Record({\n      'error_message' : IDL.Text,\n      'error_code' : IDL.Nat64,\n    }),\n  });\n  const QueryArchiveResult = IDL.Variant({\n    'Ok' : BlockRange,\n    'Err' : QueryArchiveError,\n  });\n  const QueryArchiveFn = IDL.Func(\n      [GetBlocksArgs],\n      [QueryArchiveResult],\n      ['query'],\n    );\n  const ArchivedBlocksRange = IDL.Record({\n    'callback' : QueryArchiveFn,\n    'start' : BlockIndex,\n    'length' : IDL.Nat64,\n  });\n  const QueryBlocksResponse = IDL.Record({\n    'certificate' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'blocks' : IDL.Vec(Block),\n    'chain_length' : IDL.Nat64,\n    'first_block_index' : BlockIndex,\n    'archived_blocks' : IDL.Vec(ArchivedBlocksRange),\n  });\n  const ArchivedEncodedBlocksRange = IDL.Record({\n    'callback' : IDL.Func(\n        [GetBlocksArgs],\n        [\n          IDL.Variant({\n            'Ok' : IDL.Vec(IDL.Vec(IDL.Nat8)),\n            'Err' : QueryArchiveError,\n          }),\n        ],\n        ['query'],\n      ),\n    'start' : IDL.Nat64,\n    'length' : IDL.Nat64,\n  });\n  const QueryEncodedBlocksResponse = IDL.Record({\n    'certificate' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'blocks' : IDL.Vec(IDL.Vec(IDL.Nat8)),\n    'chain_length' : IDL.Nat64,\n    'first_block_index' : IDL.Nat64,\n    'archived_blocks' : IDL.Vec(ArchivedEncodedBlocksRange),\n  });\n  const SendArgs = IDL.Record({\n    'to' : TextAccountIdentifier,\n    'fee' : Tokens,\n    'memo' : Memo,\n    'from_subaccount' : IDL.Opt(SubAccount),\n    'created_at_time' : IDL.Opt(TimeStamp),\n    'amount' : Tokens,\n  });\n  const TransferArgs = IDL.Record({\n    'to' : AccountIdentifier,\n    'fee' : Tokens,\n    'memo' : Memo,\n    'from_subaccount' : IDL.Opt(SubAccount),\n    'created_at_time' : IDL.Opt(TimeStamp),\n    'amount' : Tokens,\n  });\n  const TransferError = IDL.Variant({\n    'TxTooOld' : IDL.Record({ 'allowed_window_nanos' : IDL.Nat64 }),\n    'BadFee' : IDL.Record({ 'expected_fee' : Tokens }),\n    'TxDuplicate' : IDL.Record({ 'duplicate_of' : BlockIndex }),\n    'TxCreatedInFuture' : IDL.Null,\n    'InsufficientFunds' : IDL.Record({ 'balance' : Tokens }),\n  });\n  const TransferResult = IDL.Variant({\n    'Ok' : BlockIndex,\n    'Err' : TransferError,\n  });\n  const TransferFeeArg = IDL.Record({});\n  const TransferFee = IDL.Record({ 'transfer_fee' : Tokens });\n  return IDL.Service({\n    'account_balance' : IDL.Func([AccountBalanceArgs], [Tokens], ['query']),\n    'account_balance_dfx' : IDL.Func(\n        [AccountBalanceArgsDfx],\n        [Tokens],\n        ['query'],\n      ),\n    'account_identifier' : IDL.Func([Account], [AccountIdentifier], ['query']),\n    'archives' : IDL.Func([], [Archives], ['query']),\n    'decimals' : IDL.Func(\n        [],\n        [IDL.Record({ 'decimals' : IDL.Nat32 })],\n        ['query'],\n      ),\n    'icrc1_balance_of' : IDL.Func([Account], [Icrc1Tokens], ['query']),\n    'icrc1_decimals' : IDL.Func([], [IDL.Nat8], ['query']),\n    'icrc1_fee' : IDL.Func([], [Icrc1Tokens], ['query']),\n    'icrc1_metadata' : IDL.Func(\n        [],\n        [IDL.Vec(IDL.Tuple(IDL.Text, Value))],\n        ['query'],\n      ),\n    'icrc1_minting_account' : IDL.Func([], [IDL.Opt(Account)], ['query']),\n    'icrc1_name' : IDL.Func([], [IDL.Text], ['query']),\n    'icrc1_supported_standards' : IDL.Func(\n        [],\n        [IDL.Vec(IDL.Record({ 'url' : IDL.Text, 'name' : IDL.Text }))],\n        ['query'],\n      ),\n    'icrc1_symbol' : IDL.Func([], [IDL.Text], ['query']),\n    'icrc1_total_supply' : IDL.Func([], [Icrc1Tokens], ['query']),\n    'icrc1_transfer' : IDL.Func([TransferArg], [Icrc1TransferResult], []),\n    'icrc2_allowance' : IDL.Func([AllowanceArgs], [Allowance], ['query']),\n    'icrc2_approve' : IDL.Func([ApproveArgs], [ApproveResult], []),\n    'name' : IDL.Func([], [IDL.Record({ 'name' : IDL.Text })], ['query']),\n    'query_blocks' : IDL.Func(\n        [GetBlocksArgs],\n        [QueryBlocksResponse],\n        ['query'],\n      ),\n    'query_encoded_blocks' : IDL.Func(\n        [GetBlocksArgs],\n        [QueryEncodedBlocksResponse],\n        ['query'],\n      ),\n    'send_dfx' : IDL.Func([SendArgs], [BlockIndex], []),\n    'symbol' : IDL.Func([], [IDL.Record({ 'symbol' : IDL.Text })], ['query']),\n    'transfer' : IDL.Func([TransferArgs], [TransferResult], []),\n    'transfer_fee' : IDL.Func([TransferFeeArg], [TransferFee], ['query']),\n  });\n};\nexport const init = ({ IDL }) => {\n  const SubAccount = IDL.Vec(IDL.Nat8);\n  const Account = IDL.Record({\n    'owner' : IDL.Principal,\n    'subaccount' : IDL.Opt(SubAccount),\n  });\n  const FeatureFlags = IDL.Record({ 'icrc2' : IDL.Bool });\n  const UpgradeArgs = IDL.Record({\n    'maximum_number_of_accounts' : IDL.Opt(IDL.Nat64),\n    'icrc1_minting_account' : IDL.Opt(Account),\n    'feature_flags' : IDL.Opt(FeatureFlags),\n  });\n  const Tokens = IDL.Record({ 'e8s' : IDL.Nat64 });\n  const TextAccountIdentifier = IDL.Text;\n  const Duration = IDL.Record({ 'secs' : IDL.Nat64, 'nanos' : IDL.Nat32 });\n  const ArchiveOptions = IDL.Record({\n    'num_blocks_to_archive' : IDL.Nat64,\n    'trigger_threshold' : IDL.Nat64,\n    'max_message_size_bytes' : IDL.Opt(IDL.Nat64),\n    'cycles_for_archive_creation' : IDL.Opt(IDL.Nat64),\n    'node_max_memory_size_bytes' : IDL.Opt(IDL.Nat64),\n    'controller_id' : IDL.Principal,\n  });\n  const InitArgs = IDL.Record({\n    'send_whitelist' : IDL.Vec(IDL.Principal),\n    'token_symbol' : IDL.Opt(IDL.Text),\n    'transfer_fee' : IDL.Opt(Tokens),\n    'minting_account' : TextAccountIdentifier,\n    'maximum_number_of_accounts' : IDL.Opt(IDL.Nat64),\n    'accounts_overflow_trim_quantity' : IDL.Opt(IDL.Nat64),\n    'transaction_window' : IDL.Opt(Duration),\n    'max_message_size_bytes' : IDL.Opt(IDL.Nat64),\n    'icrc1_minting_account' : IDL.Opt(Account),\n    'archive_options' : IDL.Opt(ArchiveOptions),\n    'initial_values' : IDL.Vec(IDL.Tuple(TextAccountIdentifier, Tokens)),\n    'token_name' : IDL.Opt(IDL.Text),\n    'feature_flags' : IDL.Opt(FeatureFlags),\n  });\n  const LedgerCanisterPayload = IDL.Variant({\n    'Upgrade' : IDL.Opt(UpgradeArgs),\n    'Init' : InitArgs,\n  });\n  return [LedgerCanisterPayload];\n};\n", "import type { ICPTs, Subaccount } from \"@dfinity/nns-proto\";\nimport { arrayOfNumberToUint8Array, toNullable } from \"@dfinity/utils\";\nimport type {\n  TransferArg as Icrc1TransferRawRequest,\n  Tokens,\n  TransferArgs as TransferRawRequest,\n} from \"../../../candid/ledger\";\nimport { TRANSACTION_FEE } from \"../../constants/constants\";\nimport type {\n  Icrc1TransferRequest,\n  TransferRequest,\n} from \"../../types/ledger_converters\";\nimport { importNnsProto } from \"../../utils/proto.utils\";\n\nexport const subAccountNumbersToSubaccount = async (\n  subAccountNumbers: number[],\n): Promise<Subaccount> => {\n  const bytes = new Uint8Array(subAccountNumbers).buffer;\n  const { Subaccount: SubaccountConstructor } = await importNnsProto();\n  const subaccount: Subaccount = new SubaccountConstructor();\n  subaccount.setSubAccount(new Uint8Array(bytes));\n  return subaccount;\n};\n\nexport const toICPTs = async (amount: bigint): Promise<ICPTs> => {\n  const { ICPTs: ICPTsConstructor } = await importNnsProto();\n  const result = new ICPTsConstructor();\n  result.setE8s(amount.toString(10));\n  return result;\n};\n\nconst e8sToTokens = (e8s: bigint): Tokens => ({ e8s });\n\nexport const toTransferRawRequest = ({\n  to,\n  amount,\n  memo,\n  fee,\n  fromSubAccount,\n  createdAt,\n}: TransferRequest): TransferRawRequest => ({\n  to: to.toUint8Array(),\n  fee: e8sToTokens(fee ?? TRANSACTION_FEE),\n  amount: e8sToTokens(amount),\n  // Always explicitly set the memo for compatibility with ledger wallet - hardware wallet\n  memo: memo ?? BigInt(0),\n  created_at_time:\n    createdAt !== undefined ? [{ timestamp_nanos: createdAt }] : [],\n  from_subaccount:\n    fromSubAccount === undefined\n      ? []\n      : [arrayOfNumberToUint8Array(fromSubAccount)],\n});\n\n// WARNING: When using the ICRC-1 interface of the ICP ledger, there is no\n// relationship between the memo and the icrc1Memo of a transaction. The ICRC-1\n// interface simply cannot set the memo field and the non-ICRC-1 interface\n// cannot set the icrc1Memo field, even though the icrc1Memo field is called\n// just \"memo\" in canister method params.\nexport const toIcrc1TransferRawRequest = ({\n  fromSubAccount,\n  to,\n  amount,\n  fee,\n  icrc1Memo,\n  createdAt,\n}: Icrc1TransferRequest): Icrc1TransferRawRequest => ({\n  to,\n  fee: toNullable(fee ?? TRANSACTION_FEE),\n  amount,\n  memo: toNullable(icrc1Memo),\n  created_at_time: toNullable(createdAt),\n  from_subaccount: toNullable(fromSubAccount),\n});\n", "export const SUB_ACCOUNT_BYTE_LENGTH = 32;\nexport const CREATE_CANISTER_MEMO = BigInt(0x41455243); // CREA,\nexport const TOP_UP_CANISTER_MEMO = BigInt(0x50555054); // TPUP\n\nexport const TRANSACTION_FEE = BigInt(10_000);\n\n// Note:  Canister IDs are not constant, so are not provided here.\n//        The same applies to HOST.\nexport const E8S_PER_TOKEN = BigInt(100000000);\n", "import { convertStringToE8s } from \"@dfinity/utils\";\nimport type {\n  Icrc1TransferError as RawIcrc1TransferError,\n  TransferError as RawTransferError,\n} from \"../../candid/ledger\";\nimport type { BlockHeight } from \"../types/common\";\n\nexport class TransferError extends Error {}\n\nexport class InvalidSenderError extends TransferError {}\n\nexport class InvalidAccountIDError extends Error {}\n\nexport class InsufficientFundsError extends TransferError {\n  constructor(public readonly balance: bigint) {\n    super();\n  }\n}\n\nexport class TxTooOldError extends TransferError {\n  constructor(public readonly allowed_window_secs?: number | undefined) {\n    super();\n  }\n}\n\nexport class TxCreatedInFutureError extends TransferError {}\n\nexport class TxDuplicateError extends TransferError {\n  constructor(public readonly duplicateOf: BlockHeight) {\n    super();\n  }\n}\n\nexport class BadFeeError extends TransferError {\n  constructor(public readonly expectedFee: bigint) {\n    super();\n  }\n}\n\nexport const mapTransferError = (\n  rawTransferError: RawTransferError,\n): TransferError => {\n  if (\"TxDuplicate\" in rawTransferError) {\n    return new TxDuplicateError(rawTransferError.TxDuplicate.duplicate_of);\n  }\n  if (\"InsufficientFunds\" in rawTransferError) {\n    return new InsufficientFundsError(\n      rawTransferError.InsufficientFunds.balance.e8s,\n    );\n  }\n  if (\"TxCreatedInFuture\" in rawTransferError) {\n    return new TxCreatedInFutureError();\n  }\n  if (\"TxTooOld\" in rawTransferError) {\n    return new TxTooOldError(\n      Number(rawTransferError.TxTooOld.allowed_window_nanos),\n    );\n  }\n  if (\"BadFee\" in rawTransferError) {\n    return new BadFeeError(rawTransferError.BadFee.expected_fee.e8s);\n  }\n  // Edge case\n  return new TransferError(\n    `Unknown error type ${JSON.stringify(rawTransferError)}`,\n  );\n};\n\nexport const mapIcrc1TransferError = (\n  rawTransferError: RawIcrc1TransferError,\n): TransferError => {\n  if (\"Duplicate\" in rawTransferError) {\n    return new TxDuplicateError(rawTransferError.Duplicate.duplicate_of);\n  }\n  if (\"InsufficientFunds\" in rawTransferError) {\n    return new InsufficientFundsError(\n      rawTransferError.InsufficientFunds.balance,\n    );\n  }\n  if (\"CreatedInFuture\" in rawTransferError) {\n    return new TxCreatedInFutureError();\n  }\n  if (\"TooOld\" in rawTransferError) {\n    return new TxTooOldError();\n  }\n  if (\"BadFee\" in rawTransferError) {\n    return new BadFeeError(rawTransferError.BadFee.expected_fee);\n  }\n  // Edge case\n  return new TransferError(\n    `Unknown error type ${JSON.stringify(rawTransferError)}`,\n  );\n};\n\nexport const mapTransferProtoError = (responseBytes: Error): TransferError => {\n  const { message } = responseBytes;\n\n  if (message.includes(\"Reject code: 5\")) {\n    // Match against the different error types.\n    // This string matching is fragile. It's a stop-gap solution until\n    // we migrate to the candid interface.\n\n    if (message.match(/Sending from (.*) is not allowed/)) {\n      return new InvalidSenderError();\n    }\n\n    {\n      const m = message.match(/transaction.*duplicate.* in block (\\d+)/);\n      if (m && m.length > 1) {\n        return new TxDuplicateError(BigInt(m[1]));\n      }\n    }\n\n    {\n      const m = message.match(\n        /debit account.*, current balance: (\\d*(\\.\\d*)?)/,\n      );\n      if (m && m.length > 1) {\n        const balance = convertStringToE8s(m[1]);\n        if (typeof balance === \"bigint\") {\n          return new InsufficientFundsError(balance);\n        }\n      }\n    }\n\n    if (message.includes(\"is in future\")) {\n      return new TxCreatedInFutureError();\n    }\n\n    {\n      const m = message.match(/older than (\\d+)/);\n      if (m && m.length > 1) {\n        return new TxTooOldError(Number.parseInt(m[1]));\n      }\n    }\n  }\n\n  // Unknown error. Throw as-is.\n  throw responseBytes;\n};\n"],
  "mappings": "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",
  "names": ["createServices", "idlFactory", "IDL", "SubAccount", "Account", "FeatureFlags", "UpgradeArgs", "Tokens", "TextAccountIdentifier", "Duration", "ArchiveOptions", "InitArgs", "LedgerCanisterPayload", "BlockIndex", "GetBlocksArgs", "Memo", "AccountIdentifier", "TimeStamp", "Operation", "Transaction", "Block", "BlockRange", "QueryArchiveError", "QueryArchiveResult", "QueryArchiveFn", "ArchivedBlocksRange", "QueryBlocksResponse", "ArchivedEncodedBlocksRange", "QueryEncodedBlocksResponse", "AccountBalanceArgs", "AccountBalanceArgsDfx", "Archive", "Archives", "Icrc1Tokens", "Value", "Icrc1Timestamp", "TransferArg", "Icrc1BlockIndex", "Icrc1TransferError", "Icrc1TransferResult", "AllowanceArgs", "Allowance", "ApproveArgs", "ApproveError", "ApproveResult", "SendArgs", "TransferArgs", "TransferError", "TransferResult", "TransferFeeArg", "TransferFee", "idlFactory", "IDL", "SubAccount", "Account", "FeatureFlags", "UpgradeArgs", "Tokens", "TextAccountIdentifier", "Duration", "ArchiveOptions", "InitArgs", "LedgerCanisterPayload", "AccountIdentifier", "AccountBalanceArgs", "AccountBalanceArgsDfx", "Archive", "Archives", "Icrc1Tokens", "Value", "Icrc1Timestamp", "TransferArg", "Icrc1BlockIndex", "Icrc1TransferError", "Icrc1TransferResult", "AllowanceArgs", "TimeStamp", "Allowance", "ApproveArgs", "ApproveError", "ApproveResult", "BlockIndex", "GetBlocksArgs", "Memo", "Operation", "Transaction", "Block", "BlockRange", "QueryArchiveError", "QueryArchiveResult", "QueryArchiveFn", "ArchivedBlocksRange", "QueryBlocksResponse", "ArchivedEncodedBlocksRange", "QueryEncodedBlocksResponse", "SendArgs", "TransferArgs", "TransferError", "TransferResult", "TransferFeeArg", "TransferFee", "arrayOfNumberToUint8Array", "toNullable", "CREATE_CANISTER_MEMO", "TOP_UP_CANISTER_MEMO", "TRANSACTION_FEE", "E8S_PER_TOKEN", "subAccountNumbersToSubaccount", "subAccountNumbers", "bytes", "SubaccountConstructor", "importNnsProto", "subaccount", "toICPTs", "amount", "ICPTsConstructor", "result", "e8sToTokens", "e8s", "toTransferRawRequest", "to", "memo", "fee", "fromSubAccount", "createdAt", "TRANSACTION_FEE", "arrayOfNumberToUint8Array", "toIcrc1TransferRawRequest", "icrc1Memo", "toNullable", "convertStringToE8s", "TransferError", "InvalidSenderError", "InvalidAccountIDError", "InsufficientFundsError", "balance", "TxTooOldError", "allowed_window_secs", "TxCreatedInFutureError", "TxDuplicateError", "duplicateOf", "BadFeeError", "expectedFee", "mapTransferError", "rawTransferError", "mapIcrc1TransferError", "mapTransferProtoError", "responseBytes", "message", "m", "LedgerCanister", "_LedgerCanister", "agent", "canisterId", "service", "certifiedService", "updateFetcher", "queryFetcher", "hardwareWallet", "accountIdentifierParam", "certified", "accountIdentifier", "paramToAccountIdentifier", "e8s", "request", "TRANSACTION_FEE", "rawRequest", "toTransferRawRequest", "response", "mapTransferError", "toIcrc1TransferRawRequest", "mapIcrc1TransferError", "callMethod", "AccountBalanceRequestConstructor", "ICPTs", "importNnsProto", "responseBytes", "to", "amount", "memo", "fee", "fromSubAccount", "createdAt", "SendRequest", "Payment", "Memo", "TimeStamp", "BlockHeight", "payment", "toICPTs", "requestMemo", "timestamp", "subAccountNumbersToSubaccount", "err", "mapTransferProtoError", "options", "MAINNET_LEDGER_CANISTER_ID", "createServices", "idlFactory", "updateCall", "queryCall"]
}
