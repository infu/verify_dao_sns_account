{
  "version": 3,
  "sources": ["../../src/index.ts", "../../src/account_identifier.ts", "../../../../node_modules/@noble/hashes/src/_assert.ts", "../../../../node_modules/@noble/hashes/src/utils.ts", "../../../../node_modules/@noble/hashes/src/_sha2.ts", "../../../../node_modules/@noble/hashes/src/sha256.ts", "../../src/utils/proto.utils.ts", "../../src/errors/ledger.errors.ts", "../../src/index.canister.ts", "../../candid/index.certified.idl.js", "../../candid/index.idl.js", "../../src/constants/canister_ids.ts", "../../src/errors/index.errors.ts", "../../src/utils/params.utils.ts", "../../src/ledger.canister.ts", "../../candid/ledger.certified.idl.js", "../../candid/ledger.idl.js", "../../src/canisters/ledger/ledger.request.converts.ts", "../../src/constants/constants.ts", "../../src/utils/account_identifier.utils.ts", "../../src/utils/accounts.utils.ts"],
  "sourcesContent": ["export type * from \"../candid/index\";\nexport { AccountIdentifier, SubAccount } from \"./account_identifier\";\nexport * from \"./errors/ledger.errors\";\nexport { IndexCanister } from \"./index.canister\";\nexport { LedgerCanister } from \"./ledger.canister\";\nexport type * from \"./types/common\";\nexport * from \"./types/ledger.options\";\nexport * from \"./utils/account_identifier.utils\";\nexport * from \"./utils/accounts.utils\";\n", "import type { AccountIdentifier as AccountIdentifierPb } from \"@dfinity/nns-proto\";\nimport type { Principal } from \"@dfinity/principal\";\nimport {\n  arrayOfNumberToUint8Array,\n  asciiStringToByteArray,\n  bigEndianCrc32,\n  uint8ArrayToHexString,\n} from \"@dfinity/utils\";\nimport { sha224 } from \"@noble/hashes/sha256\";\nimport { importNnsProto } from \"./utils/proto.utils\";\n\nexport class AccountIdentifier {\n  private constructor(private readonly bytes: Uint8Array) {}\n\n  public static fromHex(hex: string): AccountIdentifier {\n    return new AccountIdentifier(Uint8Array.from(Buffer.from(hex, \"hex\")));\n  }\n\n  public static fromPrincipal({\n    principal,\n    subAccount = SubAccount.ZERO,\n  }: {\n    principal: Principal;\n    subAccount?: SubAccount;\n  }): AccountIdentifier {\n    // Hash (sha224) the principal, the subAccount and some padding\n    const padding = asciiStringToByteArray(\"\\x0Aaccount-id\");\n\n    const shaObj = sha224.create();\n    shaObj.update(\n      arrayOfNumberToUint8Array([\n        ...padding,\n        ...principal.toUint8Array(),\n        ...subAccount.toUint8Array(),\n      ]),\n    );\n    const hash = shaObj.digest();\n\n    // Prepend the checksum of the hash and convert to a hex string\n    const checksum = bigEndianCrc32(hash);\n    const bytes = new Uint8Array([...checksum, ...hash]);\n    return new AccountIdentifier(bytes);\n  }\n\n  /**\n   * @returns An AccountIdentifier protobuf object.\n   */\n  public async toProto(): Promise<AccountIdentifierPb> {\n    const { AccountIdentifier: AccountIdentifierConstructor } =\n      await importNnsProto();\n    const accountIdentifier = new AccountIdentifierConstructor();\n    accountIdentifier.setHash(this.bytes);\n    return accountIdentifier;\n  }\n\n  public toHex(): string {\n    return uint8ArrayToHexString(this.bytes);\n  }\n\n  public toUint8Array(): Uint8Array {\n    return this.bytes;\n  }\n\n  public toNumbers(): number[] {\n    return Array.from(this.bytes);\n  }\n\n  public toAccountIdentifierHash(): { hash: Uint8Array } {\n    return {\n      hash: this.toUint8Array(),\n    };\n  }\n}\n\nexport class SubAccount {\n  private constructor(private readonly bytes: Uint8Array) {}\n\n  public static fromBytes(bytes: Uint8Array): SubAccount | Error {\n    if (bytes.length != 32) {\n      return Error(\"Subaccount length must be 32-bytes\");\n    }\n\n    return new SubAccount(bytes);\n  }\n\n  public static fromPrincipal(principal: Principal): SubAccount {\n    const bytes = new Uint8Array(32).fill(0);\n\n    const principalBytes = principal.toUint8Array();\n    bytes[0] = principalBytes.length;\n\n    for (let i = 0; i < principalBytes.length; i++) {\n      bytes[1 + i] = principalBytes[i];\n    }\n\n    return new SubAccount(bytes);\n  }\n\n  public static fromID(id: number): SubAccount {\n    if (id < 0 || id > 255) {\n      throw \"Subaccount ID must be >= 0 and <= 255\";\n    }\n\n    const bytes: Uint8Array = new Uint8Array(32).fill(0);\n    bytes[31] = id;\n    return new SubAccount(bytes);\n  }\n\n  public static ZERO: SubAccount = this.fromID(0);\n\n  public toUint8Array(): Uint8Array {\n    return this.bytes;\n  }\n}\n", "function number(n: number) {\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error(`Wrong positive integer: ${n}`);\n}\n\nfunction bool(b: boolean) {\n  if (typeof b !== 'boolean') throw new Error(`Expected boolean, not ${b}`);\n}\n\nfunction bytes(b: Uint8Array | undefined, ...lengths: number[]) {\n  if (!(b instanceof Uint8Array)) throw new Error('Expected Uint8Array');\n  if (lengths.length > 0 && !lengths.includes(b.length))\n    throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\n\ntype Hash = {\n  (data: Uint8Array): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create: any;\n};\nfunction hash(hash: Hash) {\n  if (typeof hash !== 'function' || typeof hash.create !== 'function')\n    throw new Error('Hash should be wrapped by utils.wrapConstructor');\n  number(hash.outputLen);\n  number(hash.blockLen);\n}\n\nfunction exists(instance: any, checkFinished = true) {\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\nfunction output(out: any, instance: any) {\n  bytes(out);\n  const min = instance.outputLen;\n  if (out.length < min) {\n    throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n  }\n}\n\nexport { number, bool, bytes, hash, exists, output };\n\nconst assert = { number, bool, bytes, hash, exists, output };\nexport default assert;\n", "/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated, we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\n\n// prettier-ignore\nexport type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array |\n  Uint16Array | Int16Array | Uint32Array | Int32Array;\n\nconst u8a = (a: any): a is Uint8Array => a instanceof Uint8Array;\n// Cast array to different type\nexport const u8 = (arr: TypedArray) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr: TypedArray) =>\n  new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n\n// Cast array to view\nexport const createView = (arr: TypedArray) =>\n  new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word: number, shift: number) => (word << (32 - shift)) | (word >>> shift);\n\n// big-endian hardware is rare. Just in case someone still decides to run hashes:\n// early-throw an error because we don't support BE yet.\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\nif (!isLE) throw new Error('Non little-endian hardware is not supported');\n\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  if (!u8a(bytes)) throw new Error('Uint8Array expected');\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const len = hex.length;\n  if (len % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + len);\n  const array = new Uint8Array(len / 2);\n  for (let i = 0; i < array.length; i++) {\n    const j = i * 2;\n    const hexByte = hex.slice(j, j + 2);\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte) || byte < 0) throw new Error('Invalid byte sequence');\n    array[i] = byte;\n  }\n  return array;\n}\n\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => {};\n\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters: number, tick: number, cb: (i: number) => void) {\n  let ts = Date.now();\n  for (let i = 0; i < iters; i++) {\n    cb(i);\n    // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n    const diff = Date.now() - ts;\n    if (diff >= 0 && diff < tick) continue;\n    await nextTick();\n    ts += diff;\n  }\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\n\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\nexport type Input = Uint8Array | string;\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data: Input): Uint8Array {\n  if (typeof data === 'string') data = utf8ToBytes(data);\n  if (!u8a(data)) throw new Error(`expected Uint8Array, got ${typeof data}`);\n  return data;\n}\n\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));\n  let pad = 0; // walk through each item, ensure they have proper type\n  arrays.forEach((a) => {\n    if (!u8a(a)) throw new Error('Uint8Array expected');\n    r.set(a, pad);\n    pad += a.length;\n  });\n  return r;\n}\n\n// For runtime check if class implements interface\nexport abstract class Hash<T extends Hash<T>> {\n  abstract blockLen: number; // Bytes per block\n  abstract outputLen: number; // Bytes in output\n  abstract update(buf: Input): this;\n  // Writes digest into buf\n  abstract digestInto(buf: Uint8Array): void;\n  abstract digest(): Uint8Array;\n  /**\n   * Resets internal state. Makes Hash instance unusable.\n   * Reset is impossible for keyed hashes if key is consumed into state. If digest is not consumed\n   * by user, they will need to manually call `destroy()` when zeroing is necessary.\n   */\n  abstract destroy(): void;\n  /**\n   * Clones hash instance. Unsafe: doesn't check whether `to` is valid. Can be used as `clone()`\n   * when no options are passed.\n   * Reasons to use `_cloneInto` instead of clone: 1) performance 2) reuse instance => all internal\n   * buffers are overwritten => causes buffer overwrite which is used for digest in some cases.\n   * There are no guarantees for clean-up because it's impossible in JS.\n   */\n  abstract _cloneInto(to?: T): T;\n  // Safe version that clones internal state\n  clone(): T {\n    return this._cloneInto();\n  }\n}\n\n/**\n * XOF: streaming API to read digest in chunks.\n * Same as 'squeeze' in keccak/k12 and 'seek' in blake3, but more generic name.\n * When hash used in XOF mode it is up to user to call '.destroy' afterwards, since we cannot\n * destroy state, next call can require more bytes.\n */\nexport type HashXOF<T extends Hash<T>> = Hash<T> & {\n  xof(bytes: number): Uint8Array; // Read 'bytes' bytes from digest stream\n  xofInto(buf: Uint8Array): Uint8Array; // read buf.length bytes from digest stream into buf\n};\n\nconst toStr = {}.toString;\ntype EmptyObj = {};\nexport function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(\n  defaults: T1,\n  opts?: T2\n): T1 & T2 {\n  if (opts !== undefined && toStr.call(opts) !== '[object Object]')\n    throw new Error('Options should be object or undefined');\n  const merged = Object.assign(defaults, opts);\n  return merged as T1 & T2;\n}\n\nexport type CHash = ReturnType<typeof wrapConstructor>;\n\nexport function wrapConstructor<T extends Hash<T>>(hashCons: () => Hash<T>) {\n  const hashC = (msg: Input): Uint8Array => hashCons().update(toBytes(msg)).digest();\n  const tmp = hashCons();\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = () => hashCons();\n  return hashC;\n}\n\nexport function wrapConstructorWithOpts<H extends Hash<H>, T extends Object>(\n  hashCons: (opts?: T) => Hash<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\nexport function wrapXOFConstructorWithOpts<H extends HashXOF<H>, T extends Object>(\n  hashCons: (opts?: T) => HashXOF<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nexport function randomBytes(bytesLength = 32): Uint8Array {\n  if (crypto && typeof crypto.getRandomValues === 'function') {\n    return crypto.getRandomValues(new Uint8Array(bytesLength));\n  }\n  throw new Error('crypto.getRandomValues must be defined');\n}\n", "import { exists, output } from './_assert.js';\nimport { Hash, createView, Input, toBytes } from './utils.js';\n\n// Polyfill for Safari 14\nfunction setBigUint64(view: DataView, byteOffset: number, value: bigint, isLE: boolean): void {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n  const _32n = BigInt(32);\n  const _u32_max = BigInt(0xffffffff);\n  const wh = Number((value >> _32n) & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\n\n// Base SHA2 class (RFC 6234)\nexport abstract class SHA2<T extends SHA2<T>> extends Hash<T> {\n  protected abstract process(buf: DataView, offset: number): void;\n  protected abstract get(): number[];\n  protected abstract set(...args: number[]): void;\n  abstract destroy(): void;\n  protected abstract roundClean(): void;\n  // For partial updates less than block size\n  protected buffer: Uint8Array;\n  protected view: DataView;\n  protected finished = false;\n  protected length = 0;\n  protected pos = 0;\n  protected destroyed = false;\n\n  constructor(\n    readonly blockLen: number,\n    public outputLen: number,\n    readonly padOffset: number,\n    readonly isLE: boolean\n  ) {\n    super();\n    this.buffer = new Uint8Array(blockLen);\n    this.view = createView(this.buffer);\n  }\n  update(data: Input): this {\n    exists(this);\n    const { view, buffer, blockLen } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      // Fast path: we have at least one block in input, cast it to view and process\n      if (take === blockLen) {\n        const dataView = createView(data);\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n      if (this.pos === blockLen) {\n        this.process(view, 0);\n        this.pos = 0;\n      }\n    }\n    this.length += data.length;\n    this.roundClean();\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    exists(this);\n    output(out, this);\n    this.finished = true;\n    // Padding\n    // We can avoid allocation of buffer for padding completely if it\n    // was previously not allocated here. But it won't change performance.\n    const { buffer, view, blockLen, isLE } = this;\n    let { pos } = this;\n    // append the bit '1' to the message\n    buffer[pos++] = 0b10000000;\n    this.buffer.subarray(pos).fill(0);\n    // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n    if (this.padOffset > blockLen - pos) {\n      this.process(view, 0);\n      pos = 0;\n    }\n    // Pad until full block byte with zeros\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n    // So we just write lowest 64 bits of that value.\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n    this.process(view, 0);\n    const oview = createView(out);\n    const len = this.outputLen;\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\n    const outLen = len / 4;\n    const state = this.get();\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\n  }\n  digest() {\n    const { buffer, outputLen } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n  _cloneInto(to?: T): T {\n    to ||= new (this.constructor as any)() as T;\n    to.set(...this.get());\n    const { blockLen, buffer, length, finished, destroyed, pos } = this;\n    to.length = length;\n    to.pos = pos;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    if (length % blockLen) to.buffer.set(buffer);\n    return to;\n  }\n}\n", "import { SHA2 } from './_sha2.js';\nimport { rotr, wrapConstructor } from './utils.js';\n\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\n// BTC network is doing 2^67 hashes/sec as per early 2023.\n\n// Choice: a ? b : c\nconst Chi = (a: number, b: number, c: number) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a: number, b: number, c: number) => (a & b) ^ (a & c) ^ (b & c);\n\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */new Uint32Array([\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = /* @__PURE__ */new Uint32Array([\n  0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nclass SHA256 extends SHA2<SHA256> {\n  // We cannot use array here since array allows indexing by variable\n  // which means optimizer/compiler cannot use registers.\n  A = IV[0] | 0;\n  B = IV[1] | 0;\n  C = IV[2] | 0;\n  D = IV[3] | 0;\n  E = IV[4] | 0;\n  F = IV[5] | 0;\n  G = IV[6] | 0;\n  H = IV[7] | 0;\n\n  constructor() {\n    super(64, 32, 8, false);\n  }\n  protected get(): [number, number, number, number, number, number, number, number] {\n    const { A, B, C, D, E, F, G, H } = this;\n    return [A, B, C, D, E, F, G, H];\n  }\n  // prettier-ignore\n  protected set(\n    A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number\n  ) {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n    this.F = F | 0;\n    this.G = G | 0;\n    this.H = H | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\n    for (let i = 16; i < 64; i++) {\n      const W15 = SHA256_W[i - 15];\n      const W2 = SHA256_W[i - 2];\n      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n      SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n    }\n    // Compression function main loop, 64 rounds\n    let { A, B, C, D, E, F, G, H } = this;\n    for (let i = 0; i < 64; i++) {\n      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n      const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n      const T2 = (sigma0 + Maj(A, B, C)) | 0;\n      H = G;\n      G = F;\n      F = E;\n      E = (D + T1) | 0;\n      D = C;\n      C = B;\n      B = A;\n      A = (T1 + T2) | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    E = (E + this.E) | 0;\n    F = (F + this.F) | 0;\n    G = (G + this.G) | 0;\n    H = (H + this.H) | 0;\n    this.set(A, B, C, D, E, F, G, H);\n  }\n  protected roundClean() {\n    SHA256_W.fill(0);\n  }\n  destroy() {\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\n    this.buffer.fill(0);\n  }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n  A = 0xc1059ed8 | 0;\n  B = 0x367cd507 | 0;\n  C = 0x3070dd17 | 0;\n  D = 0xf70e5939 | 0;\n  E = 0xffc00b31 | 0;\n  F = 0x68581511 | 0;\n  G = 0x64f98fa7 | 0;\n  H = 0xbefa4fa4 | 0;\n  constructor() {\n    super();\n    this.outputLen = 28;\n  }\n}\n\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());\nexport const sha224 = /* @__PURE__ */ wrapConstructor(() => new SHA224());\n", "import type { Agent } from \"@dfinity/agent\";\nimport { polling } from \"@dfinity/agent\";\nimport type { Principal } from \"@dfinity/principal\";\n\n// eslint-disable-next-line @typescript-eslint/consistent-type-imports\ntype ModuleType = typeof import(\"@dfinity/nns-proto\");\nexport const importNnsProto = (): Promise<ModuleType> =>\n  import(\"@dfinity/nns-proto\");\n\n/**\n * Submits an update call to the IC.\n * @returns The (binary) response if the request succeeded, an error otherwise.\n */\nexport const updateCall = async ({\n  agent,\n  canisterId,\n  methodName,\n  arg,\n}: {\n  agent: Agent;\n  canisterId: Principal;\n  methodName: string;\n  arg: ArrayBuffer;\n}): Promise<Uint8Array> => {\n  const submitResponse = await agent.call(canisterId, {\n    methodName,\n    arg,\n    effectiveCanisterId: canisterId,\n  });\n\n  if (!submitResponse.response.ok) {\n    throw new Error(\n      [\n        \"Call failed:\",\n        `  Method: ${methodName}`,\n        `  Canister ID: ${canisterId}`,\n        `  Request ID: ${submitResponse.requestId}`,\n        `  HTTP status code: ${submitResponse.response.status}`,\n        `  HTTP status text: ${submitResponse.response.statusText}`,\n      ].join(\"\\n\"),\n    );\n  }\n\n  const blob = await polling.pollForResponse(\n    agent,\n    canisterId,\n    submitResponse.requestId,\n    polling.defaultStrategy(),\n  );\n\n  return new Uint8Array(blob);\n};\n\n/**\n * Submits a query call to the IC.\n * @returns The (binary) response if the request succeeded, an error otherwise.\n */\nexport const queryCall = async ({\n  agent,\n  canisterId,\n  methodName,\n  arg,\n}: {\n  agent: Agent;\n  canisterId: Principal;\n  methodName: string;\n  arg: ArrayBuffer;\n}): Promise<Uint8Array> => {\n  const queryResponse = await agent.query(canisterId, {\n    methodName,\n    arg,\n  });\n\n  if (queryResponse.status == \"rejected\") {\n    throw new Error(\n      [\n        \"Call failed:\",\n        `  Method: ${methodName}`,\n        `  Canister ID: ${canisterId}`,\n        `  HTTP status code: ${queryResponse.reject_code}`,\n        `  HTTP status text: ${queryResponse.reject_message}`,\n      ].join(\"\\n\"),\n    );\n  }\n\n  return new Uint8Array(queryResponse.reply.arg);\n};\n", "import { convertStringToE8s } from \"@dfinity/utils\";\nimport type {\n  Icrc1TransferError as RawIcrc1TransferError,\n  TransferError as RawTransferError,\n} from \"../../candid/ledger\";\nimport type { BlockHeight } from \"../types/common\";\n\nexport class TransferError extends Error {}\n\nexport class InvalidSenderError extends TransferError {}\n\nexport class InvalidAccountIDError extends Error {}\n\nexport class InsufficientFundsError extends TransferError {\n  constructor(public readonly balance: bigint) {\n    super();\n  }\n}\n\nexport class TxTooOldError extends TransferError {\n  constructor(public readonly allowed_window_secs?: number | undefined) {\n    super();\n  }\n}\n\nexport class TxCreatedInFutureError extends TransferError {}\n\nexport class TxDuplicateError extends TransferError {\n  constructor(public readonly duplicateOf: BlockHeight) {\n    super();\n  }\n}\n\nexport class BadFeeError extends TransferError {\n  constructor(public readonly expectedFee: bigint) {\n    super();\n  }\n}\n\nexport const mapTransferError = (\n  rawTransferError: RawTransferError,\n): TransferError => {\n  if (\"TxDuplicate\" in rawTransferError) {\n    return new TxDuplicateError(rawTransferError.TxDuplicate.duplicate_of);\n  }\n  if (\"InsufficientFunds\" in rawTransferError) {\n    return new InsufficientFundsError(\n      rawTransferError.InsufficientFunds.balance.e8s,\n    );\n  }\n  if (\"TxCreatedInFuture\" in rawTransferError) {\n    return new TxCreatedInFutureError();\n  }\n  if (\"TxTooOld\" in rawTransferError) {\n    return new TxTooOldError(\n      Number(rawTransferError.TxTooOld.allowed_window_nanos),\n    );\n  }\n  if (\"BadFee\" in rawTransferError) {\n    return new BadFeeError(rawTransferError.BadFee.expected_fee.e8s);\n  }\n  // Edge case\n  return new TransferError(\n    `Unknown error type ${JSON.stringify(rawTransferError)}`,\n  );\n};\n\nexport const mapIcrc1TransferError = (\n  rawTransferError: RawIcrc1TransferError,\n): TransferError => {\n  if (\"Duplicate\" in rawTransferError) {\n    return new TxDuplicateError(rawTransferError.Duplicate.duplicate_of);\n  }\n  if (\"InsufficientFunds\" in rawTransferError) {\n    return new InsufficientFundsError(\n      rawTransferError.InsufficientFunds.balance,\n    );\n  }\n  if (\"CreatedInFuture\" in rawTransferError) {\n    return new TxCreatedInFutureError();\n  }\n  if (\"TooOld\" in rawTransferError) {\n    return new TxTooOldError();\n  }\n  if (\"BadFee\" in rawTransferError) {\n    return new BadFeeError(rawTransferError.BadFee.expected_fee);\n  }\n  // Edge case\n  return new TransferError(\n    `Unknown error type ${JSON.stringify(rawTransferError)}`,\n  );\n};\n\nexport const mapTransferProtoError = (responseBytes: Error): TransferError => {\n  const { message } = responseBytes;\n\n  if (message.includes(\"Reject code: 5\")) {\n    // Match against the different error types.\n    // This string matching is fragile. It's a stop-gap solution until\n    // we migrate to the candid interface.\n\n    if (message.match(/Sending from (.*) is not allowed/)) {\n      return new InvalidSenderError();\n    }\n\n    {\n      const m = message.match(/transaction.*duplicate.* in block (\\d+)/);\n      if (m && m.length > 1) {\n        return new TxDuplicateError(BigInt(m[1]));\n      }\n    }\n\n    {\n      const m = message.match(\n        /debit account.*, current balance: (\\d*(\\.\\d*)?)/,\n      );\n      if (m && m.length > 1) {\n        const balance = convertStringToE8s(m[1]);\n        if (typeof balance === \"bigint\") {\n          return new InsufficientFundsError(balance);\n        }\n      }\n    }\n\n    if (message.includes(\"is in future\")) {\n      return new TxCreatedInFutureError();\n    }\n\n    {\n      const m = message.match(/older than (\\d+)/);\n      if (m && m.length > 1) {\n        return new TxTooOldError(Number.parseInt(m[1]));\n      }\n    }\n  }\n\n  // Unknown error. Throw as-is.\n  throw responseBytes;\n};\n", "import {\n  Canister,\n  createServices,\n  toNullable,\n  type CanisterOptions,\n} from \"@dfinity/utils\";\nimport type {\n  GetAccountIdentifierTransactionsResponse,\n  _SERVICE as IndexService,\n} from \"../candid/index\";\nimport { idlFactory as certifiedIdlFactory } from \"../candid/index.certified.idl\";\nimport { idlFactory } from \"../candid/index.idl\";\nimport { MAINNET_INDEX_CANISTER_ID } from \"./constants/canister_ids\";\nimport { IndexError } from \"./errors/index.errors\";\nimport type { GetTransactionsParams } from \"./types/index.params\";\nimport type { AccountBalanceParams } from \"./types/ledger.params\";\nimport { paramToAccountIdentifierHex } from \"./utils/params.utils\";\n\nexport class IndexCanister extends Canister<IndexService> {\n  static create({\n    canisterId: optionsCanisterId,\n    ...options\n  }: CanisterOptions<IndexService>) {\n    const { service, certifiedService, canisterId } =\n      createServices<IndexService>({\n        options: {\n          ...options,\n          canisterId: optionsCanisterId ?? MAINNET_INDEX_CANISTER_ID,\n        },\n        idlFactory,\n        certifiedIdlFactory,\n      });\n\n    return new IndexCanister(canisterId, service, certifiedService);\n  }\n\n  /**\n   * Returns the balance of the specified account identifier.\n   *\n   * @param {AccountBalanceParams} params The parameters to get the balance of an account.\n   * @param {AccountIdentifierParam} params.accountIdentifier The account identifier provided either as hex string or as an AccountIdentifier.\n   * @param {boolean} params.certified query or update call.\n   * @returns {Promise<bigint>} The balance of the given account.\n   */\n  accountBalance = ({\n    certified,\n    accountIdentifier,\n  }: AccountBalanceParams): Promise<bigint> =>\n    this.caller({ certified }).get_account_identifier_balance(\n      paramToAccountIdentifierHex(accountIdentifier),\n    );\n\n  /**\n   * Returns the transactions and balance of an ICP account.\n   *\n   * @param {GetTransactionsParams} params The parameters to get the transactions.\n   * @param {boolean} params.certified query or update call.\n   * @param {AccountIdentifierParam} params.accountIdentifier The account identifier provided either as hex string or as an AccountIdentifier.\n   * @param {bigint} params.start If set then the results will start from the next most recent transaction id after start (start won't be included). If not provided, then the results will start from the most recent transaction id.\n   * @param {bigint} params.maxResults Maximum number of transactions to fetch.\n   * @returns {Promise<GetAccountIdentifierTransactionsResponse>} The transactions, balance and the transaction id of the oldest transaction the account has.\n   * @throws {@link IndexError}\n   */\n  getTransactions = async ({\n    certified,\n    accountIdentifier,\n    start,\n    maxResults: max_results,\n  }: GetTransactionsParams): Promise<GetAccountIdentifierTransactionsResponse> => {\n    const response = await this.caller({\n      certified,\n    }).get_account_identifier_transactions({\n      account_identifier: paramToAccountIdentifierHex(accountIdentifier),\n      start: toNullable(start),\n      max_results,\n    });\n\n    if (\"Err\" in response) {\n      throw new IndexError(response.Err.message);\n    }\n\n    return response.Ok;\n  };\n}\n", "/* Do not edit.  Compiled with ./scripts/compile-idl-js from packages/ledger-icp/candid/index.did */\nexport const idlFactory = ({ IDL }) => {\n  const InitArg = IDL.Record({ 'ledger_id' : IDL.Principal });\n  const GetAccountIdentifierTransactionsArgs = IDL.Record({\n    'max_results' : IDL.Nat64,\n    'start' : IDL.Opt(IDL.Nat64),\n    'account_identifier' : IDL.Text,\n  });\n  const Tokens = IDL.Record({ 'e8s' : IDL.Nat64 });\n  const TimeStamp = IDL.Record({ 'timestamp_nanos' : IDL.Nat64 });\n  const Operation = IDL.Variant({\n    'Approve' : IDL.Record({\n      'fee' : Tokens,\n      'from' : IDL.Text,\n      'allowance' : Tokens,\n      'expires_at' : IDL.Opt(TimeStamp),\n      'spender' : IDL.Text,\n    }),\n    'Burn' : IDL.Record({ 'from' : IDL.Text, 'amount' : Tokens }),\n    'Mint' : IDL.Record({ 'to' : IDL.Text, 'amount' : Tokens }),\n    'Transfer' : IDL.Record({\n      'to' : IDL.Text,\n      'fee' : Tokens,\n      'from' : IDL.Text,\n      'amount' : Tokens,\n    }),\n    'TransferFrom' : IDL.Record({\n      'to' : IDL.Text,\n      'fee' : Tokens,\n      'from' : IDL.Text,\n      'amount' : Tokens,\n      'spender' : IDL.Text,\n    }),\n  });\n  const Transaction = IDL.Record({\n    'memo' : IDL.Nat64,\n    'icrc1_memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'operation' : Operation,\n    'created_at_time' : IDL.Opt(TimeStamp),\n  });\n  const TransactionWithId = IDL.Record({\n    'id' : IDL.Nat64,\n    'transaction' : Transaction,\n  });\n  const GetAccountIdentifierTransactionsResponse = IDL.Record({\n    'balance' : IDL.Nat64,\n    'transactions' : IDL.Vec(TransactionWithId),\n    'oldest_tx_id' : IDL.Opt(IDL.Nat64),\n  });\n  const GetAccountIdentifierTransactionsError = IDL.Record({\n    'message' : IDL.Text,\n  });\n  const GetAccountIdentifierTransactionsResult = IDL.Variant({\n    'Ok' : GetAccountIdentifierTransactionsResponse,\n    'Err' : GetAccountIdentifierTransactionsError,\n  });\n  const Account = IDL.Record({\n    'owner' : IDL.Principal,\n    'subaccount' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n  });\n  const GetAccountTransactionsArgs = IDL.Record({\n    'max_results' : IDL.Nat,\n    'start' : IDL.Opt(IDL.Nat),\n    'account' : Account,\n  });\n  const GetBlocksRequest = IDL.Record({\n    'start' : IDL.Nat,\n    'length' : IDL.Nat,\n  });\n  const GetBlocksResponse = IDL.Record({\n    'blocks' : IDL.Vec(IDL.Vec(IDL.Nat8)),\n    'chain_length' : IDL.Nat64,\n  });\n  const HttpRequest = IDL.Record({\n    'url' : IDL.Text,\n    'method' : IDL.Text,\n    'body' : IDL.Vec(IDL.Nat8),\n    'headers' : IDL.Vec(IDL.Tuple(IDL.Text, IDL.Text)),\n  });\n  const HttpResponse = IDL.Record({\n    'body' : IDL.Vec(IDL.Nat8),\n    'headers' : IDL.Vec(IDL.Tuple(IDL.Text, IDL.Text)),\n    'status_code' : IDL.Nat16,\n  });\n  const Status = IDL.Record({ 'num_blocks_synced' : IDL.Nat64 });\n  return IDL.Service({\n    'get_account_identifier_balance' : IDL.Func([IDL.Text], [IDL.Nat64], []),\n    'get_account_identifier_transactions' : IDL.Func(\n        [GetAccountIdentifierTransactionsArgs],\n        [GetAccountIdentifierTransactionsResult],\n        [],\n      ),\n    'get_account_transactions' : IDL.Func(\n        [GetAccountTransactionsArgs],\n        [GetAccountIdentifierTransactionsResult],\n        [],\n      ),\n    'get_blocks' : IDL.Func([GetBlocksRequest], [GetBlocksResponse], []),\n    'http_request' : IDL.Func([HttpRequest], [HttpResponse], []),\n    'icrc1_balance_of' : IDL.Func([Account], [IDL.Nat64], []),\n    'ledger_id' : IDL.Func([], [IDL.Principal], []),\n    'status' : IDL.Func([], [Status], []),\n  });\n};\nexport const init = ({ IDL }) => {\n  const InitArg = IDL.Record({ 'ledger_id' : IDL.Principal });\n  return [InitArg];\n};\n", "/* Do not edit.  Compiled with ./scripts/compile-idl-js from packages/ledger-icp/candid/index.did */\nexport const idlFactory = ({ IDL }) => {\n  const InitArg = IDL.Record({ 'ledger_id' : IDL.Principal });\n  const GetAccountIdentifierTransactionsArgs = IDL.Record({\n    'max_results' : IDL.Nat64,\n    'start' : IDL.Opt(IDL.Nat64),\n    'account_identifier' : IDL.Text,\n  });\n  const Tokens = IDL.Record({ 'e8s' : IDL.Nat64 });\n  const TimeStamp = IDL.Record({ 'timestamp_nanos' : IDL.Nat64 });\n  const Operation = IDL.Variant({\n    'Approve' : IDL.Record({\n      'fee' : Tokens,\n      'from' : IDL.Text,\n      'allowance' : Tokens,\n      'expires_at' : IDL.Opt(TimeStamp),\n      'spender' : IDL.Text,\n    }),\n    'Burn' : IDL.Record({ 'from' : IDL.Text, 'amount' : Tokens }),\n    'Mint' : IDL.Record({ 'to' : IDL.Text, 'amount' : Tokens }),\n    'Transfer' : IDL.Record({\n      'to' : IDL.Text,\n      'fee' : Tokens,\n      'from' : IDL.Text,\n      'amount' : Tokens,\n    }),\n    'TransferFrom' : IDL.Record({\n      'to' : IDL.Text,\n      'fee' : Tokens,\n      'from' : IDL.Text,\n      'amount' : Tokens,\n      'spender' : IDL.Text,\n    }),\n  });\n  const Transaction = IDL.Record({\n    'memo' : IDL.Nat64,\n    'icrc1_memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'operation' : Operation,\n    'created_at_time' : IDL.Opt(TimeStamp),\n  });\n  const TransactionWithId = IDL.Record({\n    'id' : IDL.Nat64,\n    'transaction' : Transaction,\n  });\n  const GetAccountIdentifierTransactionsResponse = IDL.Record({\n    'balance' : IDL.Nat64,\n    'transactions' : IDL.Vec(TransactionWithId),\n    'oldest_tx_id' : IDL.Opt(IDL.Nat64),\n  });\n  const GetAccountIdentifierTransactionsError = IDL.Record({\n    'message' : IDL.Text,\n  });\n  const GetAccountIdentifierTransactionsResult = IDL.Variant({\n    'Ok' : GetAccountIdentifierTransactionsResponse,\n    'Err' : GetAccountIdentifierTransactionsError,\n  });\n  const Account = IDL.Record({\n    'owner' : IDL.Principal,\n    'subaccount' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n  });\n  const GetAccountTransactionsArgs = IDL.Record({\n    'max_results' : IDL.Nat,\n    'start' : IDL.Opt(IDL.Nat),\n    'account' : Account,\n  });\n  const GetBlocksRequest = IDL.Record({\n    'start' : IDL.Nat,\n    'length' : IDL.Nat,\n  });\n  const GetBlocksResponse = IDL.Record({\n    'blocks' : IDL.Vec(IDL.Vec(IDL.Nat8)),\n    'chain_length' : IDL.Nat64,\n  });\n  const HttpRequest = IDL.Record({\n    'url' : IDL.Text,\n    'method' : IDL.Text,\n    'body' : IDL.Vec(IDL.Nat8),\n    'headers' : IDL.Vec(IDL.Tuple(IDL.Text, IDL.Text)),\n  });\n  const HttpResponse = IDL.Record({\n    'body' : IDL.Vec(IDL.Nat8),\n    'headers' : IDL.Vec(IDL.Tuple(IDL.Text, IDL.Text)),\n    'status_code' : IDL.Nat16,\n  });\n  const Status = IDL.Record({ 'num_blocks_synced' : IDL.Nat64 });\n  return IDL.Service({\n    'get_account_identifier_balance' : IDL.Func(\n        [IDL.Text],\n        [IDL.Nat64],\n        ['query'],\n      ),\n    'get_account_identifier_transactions' : IDL.Func(\n        [GetAccountIdentifierTransactionsArgs],\n        [GetAccountIdentifierTransactionsResult],\n        ['query'],\n      ),\n    'get_account_transactions' : IDL.Func(\n        [GetAccountTransactionsArgs],\n        [GetAccountIdentifierTransactionsResult],\n        ['query'],\n      ),\n    'get_blocks' : IDL.Func([GetBlocksRequest], [GetBlocksResponse], ['query']),\n    'http_request' : IDL.Func([HttpRequest], [HttpResponse], ['query']),\n    'icrc1_balance_of' : IDL.Func([Account], [IDL.Nat64], ['query']),\n    'ledger_id' : IDL.Func([], [IDL.Principal], ['query']),\n    'status' : IDL.Func([], [Status], ['query']),\n  });\n};\nexport const init = ({ IDL }) => {\n  const InitArg = IDL.Record({ 'ledger_id' : IDL.Principal });\n  return [InitArg];\n};\n", "import { Principal } from \"@dfinity/principal\";\n\nexport const MAINNET_LEDGER_CANISTER_ID = Principal.fromText(\n  \"ryjl3-tyaaa-aaaaa-aaaba-cai\",\n);\n\nexport const MAINNET_INDEX_CANISTER_ID = Principal.fromText(\n  \"qhbym-qaaaa-aaaaa-aaafq-cai\",\n);\n", "export class IndexError extends Error {}\n", "import { AccountIdentifier } from \"../account_identifier\";\nimport type { AccountIdentifierHex } from \"../types/common\";\nimport type { AccountIdentifierParam } from \"../types/ledger.params\";\n\nexport const paramToAccountIdentifier = (\n  param: AccountIdentifierParam,\n): AccountIdentifier =>\n  param instanceof AccountIdentifier ? param : AccountIdentifier.fromHex(param);\n\nexport const paramToAccountIdentifierHex = (\n  param: AccountIdentifierParam,\n): AccountIdentifierHex =>\n  param instanceof AccountIdentifier ? param.toHex() : param;\n", "import type { ActorSubclass, Agent } from \"@dfinity/agent\";\nimport type { Principal } from \"@dfinity/principal\";\nimport { createServices } from \"@dfinity/utils\";\nimport type { _SERVICE as LedgerService } from \"../candid/ledger\";\nimport { idlFactory as certifiedIdlFactory } from \"../candid/ledger.certified.idl\";\nimport { idlFactory } from \"../candid/ledger.idl\";\nimport type { AccountIdentifier } from \"./account_identifier\";\nimport {\n  subAccountNumbersToSubaccount,\n  toICPTs,\n  toIcrc1TransferRawRequest,\n  toTransferRawRequest,\n} from \"./canisters/ledger/ledger.request.converts\";\nimport { MAINNET_LEDGER_CANISTER_ID } from \"./constants/canister_ids\";\nimport { TRANSACTION_FEE } from \"./constants/constants\";\nimport {\n  mapIcrc1TransferError,\n  mapTransferError,\n  mapTransferProtoError,\n} from \"./errors/ledger.errors\";\nimport type { BlockHeight } from \"./types/common\";\nimport type {\n  LedgerCanisterCall,\n  LedgerCanisterOptions,\n} from \"./types/ledger.options\";\nimport type { AccountBalanceParams } from \"./types/ledger.params\";\nimport type {\n  Icrc1TransferRequest,\n  TransferRequest,\n} from \"./types/ledger_converters\";\nimport { paramToAccountIdentifier } from \"./utils/params.utils\";\nimport { importNnsProto, queryCall, updateCall } from \"./utils/proto.utils\";\n\nexport class LedgerCanister {\n  private constructor(\n    private readonly agent: Agent,\n    private readonly canisterId: Principal,\n    private readonly service: ActorSubclass<LedgerService>,\n    private readonly certifiedService: ActorSubclass<LedgerService>,\n    private readonly updateFetcher: LedgerCanisterCall,\n    private readonly queryFetcher: LedgerCanisterCall,\n    private readonly hardwareWallet: boolean = false,\n  ) {}\n\n  public static create(options: LedgerCanisterOptions = {}) {\n    const canisterId: Principal =\n      options.canisterId ?? MAINNET_LEDGER_CANISTER_ID;\n\n    const { service, certifiedService, agent } = createServices<LedgerService>({\n      options: {\n        ...options,\n        canisterId,\n      },\n      idlFactory,\n      certifiedIdlFactory,\n    });\n\n    return new LedgerCanister(\n      agent,\n      canisterId,\n      service,\n      certifiedService,\n      options.updateCallOverride ?? updateCall,\n      options.queryCallOverride ?? queryCall,\n      options.hardwareWallet,\n    );\n  }\n\n  /**\n   * Returns the balance of the specified account identifier.\n   *\n   * If `certified` is true, the request is fetched as an update call, otherwise\n   * it is fetched using a query call.\n   *\n   * @param {AccountBalanceParams} params The parameters to get the balance of an account.\n   * @param {AccountIdentifierParam} params.accountIdentifier The account identifier provided either as hex string or as an AccountIdentifier.\n   * @param {boolean} params.certified query or update call.\n   * @returns {Promise<bigint>} The balance of the given account.\n   * @throws {@link Error}\n   */\n  public accountBalance = async ({\n    accountIdentifier: accountIdentifierParam,\n    certified = true,\n  }: AccountBalanceParams): Promise<bigint> => {\n    const accountIdentifier = paramToAccountIdentifier(accountIdentifierParam);\n\n    if (this.hardwareWallet) {\n      return this.accountBalanceHardwareWallet({\n        accountIdentifier,\n        certified,\n      });\n    }\n    const service = certified ? this.certifiedService : this.service;\n    const tokens = await service.account_balance({\n      account: accountIdentifier.toUint8Array(),\n    });\n    return tokens.e8s;\n  };\n\n  /**\n   * Returns the transaction fee of the ledger canister\n   * @returns {BigInt}\n   */\n  public transactionFee = async () => {\n    const {\n      transfer_fee: { e8s },\n    } = await this.service.transfer_fee({});\n    return e8s;\n  };\n\n  /**\n   * Transfer ICP from the caller to the destination `accountIdentifier`.\n   * Returns the index of the block containing the tx if it was successful.\n   *\n   * @throws {@link TransferError}\n   */\n  public transfer = async (request: TransferRequest): Promise<BlockHeight> => {\n    if (this.hardwareWallet) {\n      return this.transferHardwareWallet(request);\n    }\n    // When candid is implemented, the previous lines will go away.\n    // But the transaction fee method is not supported by Ledger App yet.\n    if (request.fee === undefined) {\n      request.fee = this.hardwareWallet\n        ? TRANSACTION_FEE\n        : await this.transactionFee();\n    }\n    const rawRequest = toTransferRawRequest(request);\n    const response = await this.certifiedService.transfer(rawRequest);\n    if (\"Err\" in response) {\n      throw mapTransferError(response.Err);\n    }\n    return response.Ok;\n  };\n\n  // WARNING: When using the ICRC-1 interface of the ICP ledger, there is no\n  // relationship between the memo and the icrc1Memo of a transaction. The\n  // ICRC-1 interface simply cannot set the memo field and the non-ICRC-1\n  // interface cannot set the icrc1Memo field, even though the icrc1Memo field\n  // is called just \"memo\" in canister method params.\n  /**\n   * Transfer ICP from the caller to the destination `Account`.\n   * Returns the index of the block containing the tx if it was successful.\n   *\n   * @throws {@link TransferError}\n   */\n  public icrc1Transfer = async (\n    request: Icrc1TransferRequest,\n  ): Promise<BlockHeight> => {\n    // The transaction fee method is not supported by Ledger App yet.\n    if (request.fee === undefined) {\n      request.fee = this.hardwareWallet\n        ? TRANSACTION_FEE\n        : await this.transactionFee();\n    }\n    const rawRequest = toIcrc1TransferRawRequest(request);\n    const response = await this.certifiedService.icrc1_transfer(rawRequest);\n    if (\"Err\" in response) {\n      throw mapIcrc1TransferError(response.Err);\n    }\n    return response.Ok;\n  };\n\n  private accountBalanceHardwareWallet = async ({\n    accountIdentifier,\n    certified = true,\n  }: {\n    accountIdentifier: AccountIdentifier;\n    certified?: boolean;\n  }): Promise<bigint> => {\n    const callMethod = certified ? this.updateFetcher : this.queryFetcher;\n\n    const { AccountBalanceRequest: AccountBalanceRequestConstructor, ICPTs } =\n      await importNnsProto();\n\n    const request = new AccountBalanceRequestConstructor();\n    request.setAccount(await accountIdentifier.toProto());\n\n    const responseBytes = await callMethod({\n      agent: this.agent,\n      canisterId: this.canisterId,\n      methodName: \"account_balance_pb\",\n      arg: request.serializeBinary(),\n    });\n\n    return BigInt(\n      ICPTs.deserializeBinary(new Uint8Array(responseBytes)).getE8s(),\n    );\n  };\n\n  private transferHardwareWallet = async ({\n    to,\n    amount,\n    memo,\n    fee,\n    fromSubAccount,\n    createdAt,\n  }: TransferRequest): Promise<BlockHeight> => {\n    const { SendRequest, Payment, Memo, TimeStamp, BlockHeight } =\n      await importNnsProto();\n\n    const request = new SendRequest();\n    request.setTo(await to.toProto());\n\n    const payment = new Payment();\n    payment.setReceiverGets(await toICPTs(amount));\n    request.setPayment(payment);\n\n    request.setMaxFee(await toICPTs(fee ?? TRANSACTION_FEE));\n\n    // Always explicitly set the memo for compatibility with ledger wallet - hardware wallet\n    const requestMemo = new Memo();\n    requestMemo.setMemo((memo ?? BigInt(0)).toString());\n    request.setMemo(requestMemo);\n\n    if (createdAt !== undefined) {\n      const timestamp = new TimeStamp();\n      timestamp.setTimestampNanos(createdAt.toString());\n      request.setCreatedAtTime(timestamp);\n    }\n\n    if (fromSubAccount !== undefined) {\n      request.setFromSubaccount(\n        await subAccountNumbersToSubaccount(fromSubAccount),\n      );\n    }\n\n    try {\n      const responseBytes = await this.updateFetcher({\n        agent: this.agent,\n        canisterId: this.canisterId,\n        methodName: \"send_pb\",\n        arg: request.serializeBinary(),\n      });\n\n      // Successful tx. Return the block height.\n      return BigInt(BlockHeight.deserializeBinary(responseBytes).getHeight());\n    } catch (err) {\n      if (err instanceof Error) {\n        throw mapTransferProtoError(err);\n      }\n\n      throw err;\n    }\n  };\n}\n", "/* Do not edit.  Compiled with ./scripts/compile-idl-js from packages/ledger-icp/candid/ledger.did */\nexport const idlFactory = ({ IDL }) => {\n  const SubAccount = IDL.Vec(IDL.Nat8);\n  const Account = IDL.Record({\n    'owner' : IDL.Principal,\n    'subaccount' : IDL.Opt(SubAccount),\n  });\n  const FeatureFlags = IDL.Record({ 'icrc2' : IDL.Bool });\n  const UpgradeArgs = IDL.Record({\n    'maximum_number_of_accounts' : IDL.Opt(IDL.Nat64),\n    'icrc1_minting_account' : IDL.Opt(Account),\n    'feature_flags' : IDL.Opt(FeatureFlags),\n  });\n  const Tokens = IDL.Record({ 'e8s' : IDL.Nat64 });\n  const TextAccountIdentifier = IDL.Text;\n  const Duration = IDL.Record({ 'secs' : IDL.Nat64, 'nanos' : IDL.Nat32 });\n  const ArchiveOptions = IDL.Record({\n    'num_blocks_to_archive' : IDL.Nat64,\n    'trigger_threshold' : IDL.Nat64,\n    'max_message_size_bytes' : IDL.Opt(IDL.Nat64),\n    'cycles_for_archive_creation' : IDL.Opt(IDL.Nat64),\n    'node_max_memory_size_bytes' : IDL.Opt(IDL.Nat64),\n    'controller_id' : IDL.Principal,\n  });\n  const InitArgs = IDL.Record({\n    'send_whitelist' : IDL.Vec(IDL.Principal),\n    'token_symbol' : IDL.Opt(IDL.Text),\n    'transfer_fee' : IDL.Opt(Tokens),\n    'minting_account' : TextAccountIdentifier,\n    'maximum_number_of_accounts' : IDL.Opt(IDL.Nat64),\n    'accounts_overflow_trim_quantity' : IDL.Opt(IDL.Nat64),\n    'transaction_window' : IDL.Opt(Duration),\n    'max_message_size_bytes' : IDL.Opt(IDL.Nat64),\n    'icrc1_minting_account' : IDL.Opt(Account),\n    'archive_options' : IDL.Opt(ArchiveOptions),\n    'initial_values' : IDL.Vec(IDL.Tuple(TextAccountIdentifier, Tokens)),\n    'token_name' : IDL.Opt(IDL.Text),\n    'feature_flags' : IDL.Opt(FeatureFlags),\n  });\n  const LedgerCanisterPayload = IDL.Variant({\n    'Upgrade' : IDL.Opt(UpgradeArgs),\n    'Init' : InitArgs,\n  });\n  const BlockIndex = IDL.Nat64;\n  const GetBlocksArgs = IDL.Record({\n    'start' : BlockIndex,\n    'length' : IDL.Nat64,\n  });\n  const Memo = IDL.Nat64;\n  const AccountIdentifier = IDL.Vec(IDL.Nat8);\n  const TimeStamp = IDL.Record({ 'timestamp_nanos' : IDL.Nat64 });\n  const Operation = IDL.Variant({\n    'Approve' : IDL.Record({\n      'fee' : Tokens,\n      'from' : AccountIdentifier,\n      'allowance_e8s' : IDL.Int,\n      'allowance' : Tokens,\n      'expires_at' : IDL.Opt(TimeStamp),\n      'spender' : AccountIdentifier,\n    }),\n    'Burn' : IDL.Record({\n      'from' : AccountIdentifier,\n      'amount' : Tokens,\n      'spender' : IDL.Opt(AccountIdentifier),\n    }),\n    'Mint' : IDL.Record({ 'to' : AccountIdentifier, 'amount' : Tokens }),\n    'Transfer' : IDL.Record({\n      'to' : AccountIdentifier,\n      'fee' : Tokens,\n      'from' : AccountIdentifier,\n      'amount' : Tokens,\n    }),\n    'TransferFrom' : IDL.Record({\n      'to' : AccountIdentifier,\n      'fee' : Tokens,\n      'from' : AccountIdentifier,\n      'amount' : Tokens,\n      'spender' : AccountIdentifier,\n    }),\n  });\n  const Transaction = IDL.Record({\n    'memo' : Memo,\n    'icrc1_memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'operation' : IDL.Opt(Operation),\n    'created_at_time' : TimeStamp,\n  });\n  const Block = IDL.Record({\n    'transaction' : Transaction,\n    'timestamp' : TimeStamp,\n    'parent_hash' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n  });\n  const BlockRange = IDL.Record({ 'blocks' : IDL.Vec(Block) });\n  const QueryArchiveError = IDL.Variant({\n    'BadFirstBlockIndex' : IDL.Record({\n      'requested_index' : BlockIndex,\n      'first_valid_index' : BlockIndex,\n    }),\n    'Other' : IDL.Record({\n      'error_message' : IDL.Text,\n      'error_code' : IDL.Nat64,\n    }),\n  });\n  const QueryArchiveResult = IDL.Variant({\n    'Ok' : BlockRange,\n    'Err' : QueryArchiveError,\n  });\n  const QueryArchiveFn = IDL.Func([GetBlocksArgs], [QueryArchiveResult], []);\n  const ArchivedBlocksRange = IDL.Record({\n    'callback' : QueryArchiveFn,\n    'start' : BlockIndex,\n    'length' : IDL.Nat64,\n  });\n  const QueryBlocksResponse = IDL.Record({\n    'certificate' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'blocks' : IDL.Vec(Block),\n    'chain_length' : IDL.Nat64,\n    'first_block_index' : BlockIndex,\n    'archived_blocks' : IDL.Vec(ArchivedBlocksRange),\n  });\n  const ArchivedEncodedBlocksRange = IDL.Record({\n    'callback' : IDL.Func(\n        [GetBlocksArgs],\n        [\n          IDL.Variant({\n            'Ok' : IDL.Vec(IDL.Vec(IDL.Nat8)),\n            'Err' : QueryArchiveError,\n          }),\n        ],\n        [],\n      ),\n    'start' : IDL.Nat64,\n    'length' : IDL.Nat64,\n  });\n  const QueryEncodedBlocksResponse = IDL.Record({\n    'certificate' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'blocks' : IDL.Vec(IDL.Vec(IDL.Nat8)),\n    'chain_length' : IDL.Nat64,\n    'first_block_index' : IDL.Nat64,\n    'archived_blocks' : IDL.Vec(ArchivedEncodedBlocksRange),\n  });\n  const AccountBalanceArgs = IDL.Record({ 'account' : AccountIdentifier });\n  const AccountBalanceArgsDfx = IDL.Record({\n    'account' : TextAccountIdentifier,\n  });\n  const Archive = IDL.Record({ 'canister_id' : IDL.Principal });\n  const Archives = IDL.Record({ 'archives' : IDL.Vec(Archive) });\n  const Icrc1Tokens = IDL.Nat;\n  const Value = IDL.Variant({\n    'Int' : IDL.Int,\n    'Nat' : IDL.Nat,\n    'Blob' : IDL.Vec(IDL.Nat8),\n    'Text' : IDL.Text,\n  });\n  const Icrc1Timestamp = IDL.Nat64;\n  const TransferArg = IDL.Record({\n    'to' : Account,\n    'fee' : IDL.Opt(Icrc1Tokens),\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'from_subaccount' : IDL.Opt(SubAccount),\n    'created_at_time' : IDL.Opt(Icrc1Timestamp),\n    'amount' : Icrc1Tokens,\n  });\n  const Icrc1BlockIndex = IDL.Nat;\n  const Icrc1TransferError = IDL.Variant({\n    'GenericError' : IDL.Record({\n      'message' : IDL.Text,\n      'error_code' : IDL.Nat,\n    }),\n    'TemporarilyUnavailable' : IDL.Null,\n    'BadBurn' : IDL.Record({ 'min_burn_amount' : Icrc1Tokens }),\n    'Duplicate' : IDL.Record({ 'duplicate_of' : Icrc1BlockIndex }),\n    'BadFee' : IDL.Record({ 'expected_fee' : Icrc1Tokens }),\n    'CreatedInFuture' : IDL.Record({ 'ledger_time' : IDL.Nat64 }),\n    'TooOld' : IDL.Null,\n    'InsufficientFunds' : IDL.Record({ 'balance' : Icrc1Tokens }),\n  });\n  const Icrc1TransferResult = IDL.Variant({\n    'Ok' : Icrc1BlockIndex,\n    'Err' : Icrc1TransferError,\n  });\n  const AllowanceArgs = IDL.Record({\n    'account' : Account,\n    'spender' : Account,\n  });\n  const Allowance = IDL.Record({\n    'allowance' : Icrc1Tokens,\n    'expires_at' : IDL.Opt(TimeStamp),\n  });\n  const ApproveArgs = IDL.Record({\n    'fee' : IDL.Opt(Icrc1Tokens),\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'from_subaccount' : IDL.Opt(SubAccount),\n    'created_at_time' : IDL.Opt(TimeStamp),\n    'amount' : Icrc1Tokens,\n    'expected_allowance' : IDL.Opt(Icrc1Tokens),\n    'expires_at' : IDL.Opt(TimeStamp),\n    'spender' : Account,\n  });\n  const ApproveError = IDL.Variant({\n    'GenericError' : IDL.Record({\n      'message' : IDL.Text,\n      'error_code' : IDL.Nat,\n    }),\n    'TemporarilyUnavailable' : IDL.Null,\n    'Duplicate' : IDL.Record({ 'duplicate_of' : Icrc1BlockIndex }),\n    'BadFee' : IDL.Record({ 'expected_fee' : Icrc1Tokens }),\n    'AllowanceChanged' : IDL.Record({ 'current_allowance' : Icrc1Tokens }),\n    'CreatedInFuture' : IDL.Record({ 'ledger_time' : IDL.Nat64 }),\n    'TooOld' : IDL.Null,\n    'Expired' : IDL.Record({ 'ledger_time' : IDL.Nat64 }),\n    'InsufficientFunds' : IDL.Record({ 'balance' : Icrc1Tokens }),\n  });\n  const ApproveResult = IDL.Variant({\n    'Ok' : Icrc1BlockIndex,\n    'Err' : ApproveError,\n  });\n  const SendArgs = IDL.Record({\n    'to' : TextAccountIdentifier,\n    'fee' : Tokens,\n    'memo' : Memo,\n    'from_subaccount' : IDL.Opt(SubAccount),\n    'created_at_time' : IDL.Opt(TimeStamp),\n    'amount' : Tokens,\n  });\n  const TransferArgs = IDL.Record({\n    'to' : AccountIdentifier,\n    'fee' : Tokens,\n    'memo' : Memo,\n    'from_subaccount' : IDL.Opt(SubAccount),\n    'created_at_time' : IDL.Opt(TimeStamp),\n    'amount' : Tokens,\n  });\n  const TransferError = IDL.Variant({\n    'TxTooOld' : IDL.Record({ 'allowed_window_nanos' : IDL.Nat64 }),\n    'BadFee' : IDL.Record({ 'expected_fee' : Tokens }),\n    'TxDuplicate' : IDL.Record({ 'duplicate_of' : BlockIndex }),\n    'TxCreatedInFuture' : IDL.Null,\n    'InsufficientFunds' : IDL.Record({ 'balance' : Tokens }),\n  });\n  const TransferResult = IDL.Variant({\n    'Ok' : BlockIndex,\n    'Err' : TransferError,\n  });\n  const TransferFeeArg = IDL.Record({});\n  const TransferFee = IDL.Record({ 'transfer_fee' : Tokens });\n  return IDL.Service({\n    '_blocks' : IDL.Func([GetBlocksArgs], [QueryBlocksResponse], []),\n    '_encoded_blocks' : IDL.Func(\n        [GetBlocksArgs],\n        [QueryEncodedBlocksResponse],\n        [],\n      ),\n    'account_balance' : IDL.Func([AccountBalanceArgs], [Tokens], []),\n    'account_balance_dfx' : IDL.Func([AccountBalanceArgsDfx], [Tokens], []),\n    'account_identifier' : IDL.Func([Account], [AccountIdentifier], []),\n    'archives' : IDL.Func([], [Archives], []),\n    'decimals' : IDL.Func([], [IDL.Record({ 'decimals' : IDL.Nat32 })], []),\n    'icrc1_balance_of' : IDL.Func([Account], [Icrc1Tokens], []),\n    'icrc1_decimals' : IDL.Func([], [IDL.Nat8], []),\n    'icrc1_fee' : IDL.Func([], [Icrc1Tokens], []),\n    'icrc1_metadata' : IDL.Func([], [IDL.Vec(IDL.Tuple(IDL.Text, Value))], []),\n    'icrc1_minting_account' : IDL.Func([], [IDL.Opt(Account)], []),\n    'icrc1_name' : IDL.Func([], [IDL.Text], []),\n    'icrc1_supported_standards' : IDL.Func(\n        [],\n        [IDL.Vec(IDL.Record({ 'url' : IDL.Text, 'name' : IDL.Text }))],\n        [],\n      ),\n    'icrc1_symbol' : IDL.Func([], [IDL.Text], []),\n    'icrc1_total_supply' : IDL.Func([], [Icrc1Tokens], []),\n    'icrc1_transfer' : IDL.Func([TransferArg], [Icrc1TransferResult], []),\n    'icrc2_allowance' : IDL.Func([AllowanceArgs], [Allowance], []),\n    'icrc2_approve' : IDL.Func([ApproveArgs], [ApproveResult], []),\n    'name' : IDL.Func([], [IDL.Record({ 'name' : IDL.Text })], []),\n    'send_dfx' : IDL.Func([SendArgs], [BlockIndex], []),\n    'symbol' : IDL.Func([], [IDL.Record({ 'symbol' : IDL.Text })], []),\n    'transfer' : IDL.Func([TransferArgs], [TransferResult], []),\n    'transfer_fee' : IDL.Func([TransferFeeArg], [TransferFee], []),\n  });\n};\nexport const init = ({ IDL }) => {\n  const SubAccount = IDL.Vec(IDL.Nat8);\n  const Account = IDL.Record({\n    'owner' : IDL.Principal,\n    'subaccount' : IDL.Opt(SubAccount),\n  });\n  const FeatureFlags = IDL.Record({ 'icrc2' : IDL.Bool });\n  const UpgradeArgs = IDL.Record({\n    'maximum_number_of_accounts' : IDL.Opt(IDL.Nat64),\n    'icrc1_minting_account' : IDL.Opt(Account),\n    'feature_flags' : IDL.Opt(FeatureFlags),\n  });\n  const Tokens = IDL.Record({ 'e8s' : IDL.Nat64 });\n  const TextAccountIdentifier = IDL.Text;\n  const Duration = IDL.Record({ 'secs' : IDL.Nat64, 'nanos' : IDL.Nat32 });\n  const ArchiveOptions = IDL.Record({\n    'num_blocks_to_archive' : IDL.Nat64,\n    'trigger_threshold' : IDL.Nat64,\n    'max_message_size_bytes' : IDL.Opt(IDL.Nat64),\n    'cycles_for_archive_creation' : IDL.Opt(IDL.Nat64),\n    'node_max_memory_size_bytes' : IDL.Opt(IDL.Nat64),\n    'controller_id' : IDL.Principal,\n  });\n  const InitArgs = IDL.Record({\n    'send_whitelist' : IDL.Vec(IDL.Principal),\n    'token_symbol' : IDL.Opt(IDL.Text),\n    'transfer_fee' : IDL.Opt(Tokens),\n    'minting_account' : TextAccountIdentifier,\n    'maximum_number_of_accounts' : IDL.Opt(IDL.Nat64),\n    'accounts_overflow_trim_quantity' : IDL.Opt(IDL.Nat64),\n    'transaction_window' : IDL.Opt(Duration),\n    'max_message_size_bytes' : IDL.Opt(IDL.Nat64),\n    'icrc1_minting_account' : IDL.Opt(Account),\n    'archive_options' : IDL.Opt(ArchiveOptions),\n    'initial_values' : IDL.Vec(IDL.Tuple(TextAccountIdentifier, Tokens)),\n    'token_name' : IDL.Opt(IDL.Text),\n    'feature_flags' : IDL.Opt(FeatureFlags),\n  });\n  const LedgerCanisterPayload = IDL.Variant({\n    'Upgrade' : IDL.Opt(UpgradeArgs),\n    'Init' : InitArgs,\n  });\n  return [LedgerCanisterPayload];\n};\n", "/* Do not edit.  Compiled with ./scripts/compile-idl-js from packages/ledger-icp/candid/ledger.did */\nexport const idlFactory = ({ IDL }) => {\n  const SubAccount = IDL.Vec(IDL.Nat8);\n  const Account = IDL.Record({\n    'owner' : IDL.Principal,\n    'subaccount' : IDL.Opt(SubAccount),\n  });\n  const FeatureFlags = IDL.Record({ 'icrc2' : IDL.Bool });\n  const UpgradeArgs = IDL.Record({\n    'maximum_number_of_accounts' : IDL.Opt(IDL.Nat64),\n    'icrc1_minting_account' : IDL.Opt(Account),\n    'feature_flags' : IDL.Opt(FeatureFlags),\n  });\n  const Tokens = IDL.Record({ 'e8s' : IDL.Nat64 });\n  const TextAccountIdentifier = IDL.Text;\n  const Duration = IDL.Record({ 'secs' : IDL.Nat64, 'nanos' : IDL.Nat32 });\n  const ArchiveOptions = IDL.Record({\n    'num_blocks_to_archive' : IDL.Nat64,\n    'trigger_threshold' : IDL.Nat64,\n    'max_message_size_bytes' : IDL.Opt(IDL.Nat64),\n    'cycles_for_archive_creation' : IDL.Opt(IDL.Nat64),\n    'node_max_memory_size_bytes' : IDL.Opt(IDL.Nat64),\n    'controller_id' : IDL.Principal,\n  });\n  const InitArgs = IDL.Record({\n    'send_whitelist' : IDL.Vec(IDL.Principal),\n    'token_symbol' : IDL.Opt(IDL.Text),\n    'transfer_fee' : IDL.Opt(Tokens),\n    'minting_account' : TextAccountIdentifier,\n    'maximum_number_of_accounts' : IDL.Opt(IDL.Nat64),\n    'accounts_overflow_trim_quantity' : IDL.Opt(IDL.Nat64),\n    'transaction_window' : IDL.Opt(Duration),\n    'max_message_size_bytes' : IDL.Opt(IDL.Nat64),\n    'icrc1_minting_account' : IDL.Opt(Account),\n    'archive_options' : IDL.Opt(ArchiveOptions),\n    'initial_values' : IDL.Vec(IDL.Tuple(TextAccountIdentifier, Tokens)),\n    'token_name' : IDL.Opt(IDL.Text),\n    'feature_flags' : IDL.Opt(FeatureFlags),\n  });\n  const LedgerCanisterPayload = IDL.Variant({\n    'Upgrade' : IDL.Opt(UpgradeArgs),\n    'Init' : InitArgs,\n  });\n  const AccountIdentifier = IDL.Vec(IDL.Nat8);\n  const AccountBalanceArgs = IDL.Record({ 'account' : AccountIdentifier });\n  const AccountBalanceArgsDfx = IDL.Record({\n    'account' : TextAccountIdentifier,\n  });\n  const Archive = IDL.Record({ 'canister_id' : IDL.Principal });\n  const Archives = IDL.Record({ 'archives' : IDL.Vec(Archive) });\n  const Icrc1Tokens = IDL.Nat;\n  const Value = IDL.Variant({\n    'Int' : IDL.Int,\n    'Nat' : IDL.Nat,\n    'Blob' : IDL.Vec(IDL.Nat8),\n    'Text' : IDL.Text,\n  });\n  const Icrc1Timestamp = IDL.Nat64;\n  const TransferArg = IDL.Record({\n    'to' : Account,\n    'fee' : IDL.Opt(Icrc1Tokens),\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'from_subaccount' : IDL.Opt(SubAccount),\n    'created_at_time' : IDL.Opt(Icrc1Timestamp),\n    'amount' : Icrc1Tokens,\n  });\n  const Icrc1BlockIndex = IDL.Nat;\n  const Icrc1TransferError = IDL.Variant({\n    'GenericError' : IDL.Record({\n      'message' : IDL.Text,\n      'error_code' : IDL.Nat,\n    }),\n    'TemporarilyUnavailable' : IDL.Null,\n    'BadBurn' : IDL.Record({ 'min_burn_amount' : Icrc1Tokens }),\n    'Duplicate' : IDL.Record({ 'duplicate_of' : Icrc1BlockIndex }),\n    'BadFee' : IDL.Record({ 'expected_fee' : Icrc1Tokens }),\n    'CreatedInFuture' : IDL.Record({ 'ledger_time' : IDL.Nat64 }),\n    'TooOld' : IDL.Null,\n    'InsufficientFunds' : IDL.Record({ 'balance' : Icrc1Tokens }),\n  });\n  const Icrc1TransferResult = IDL.Variant({\n    'Ok' : Icrc1BlockIndex,\n    'Err' : Icrc1TransferError,\n  });\n  const AllowanceArgs = IDL.Record({\n    'account' : Account,\n    'spender' : Account,\n  });\n  const TimeStamp = IDL.Record({ 'timestamp_nanos' : IDL.Nat64 });\n  const Allowance = IDL.Record({\n    'allowance' : Icrc1Tokens,\n    'expires_at' : IDL.Opt(TimeStamp),\n  });\n  const ApproveArgs = IDL.Record({\n    'fee' : IDL.Opt(Icrc1Tokens),\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'from_subaccount' : IDL.Opt(SubAccount),\n    'created_at_time' : IDL.Opt(TimeStamp),\n    'amount' : Icrc1Tokens,\n    'expected_allowance' : IDL.Opt(Icrc1Tokens),\n    'expires_at' : IDL.Opt(TimeStamp),\n    'spender' : Account,\n  });\n  const ApproveError = IDL.Variant({\n    'GenericError' : IDL.Record({\n      'message' : IDL.Text,\n      'error_code' : IDL.Nat,\n    }),\n    'TemporarilyUnavailable' : IDL.Null,\n    'Duplicate' : IDL.Record({ 'duplicate_of' : Icrc1BlockIndex }),\n    'BadFee' : IDL.Record({ 'expected_fee' : Icrc1Tokens }),\n    'AllowanceChanged' : IDL.Record({ 'current_allowance' : Icrc1Tokens }),\n    'CreatedInFuture' : IDL.Record({ 'ledger_time' : IDL.Nat64 }),\n    'TooOld' : IDL.Null,\n    'Expired' : IDL.Record({ 'ledger_time' : IDL.Nat64 }),\n    'InsufficientFunds' : IDL.Record({ 'balance' : Icrc1Tokens }),\n  });\n  const ApproveResult = IDL.Variant({\n    'Ok' : Icrc1BlockIndex,\n    'Err' : ApproveError,\n  });\n  const BlockIndex = IDL.Nat64;\n  const GetBlocksArgs = IDL.Record({\n    'start' : BlockIndex,\n    'length' : IDL.Nat64,\n  });\n  const Memo = IDL.Nat64;\n  const Operation = IDL.Variant({\n    'Approve' : IDL.Record({\n      'fee' : Tokens,\n      'from' : AccountIdentifier,\n      'allowance_e8s' : IDL.Int,\n      'allowance' : Tokens,\n      'expires_at' : IDL.Opt(TimeStamp),\n      'spender' : AccountIdentifier,\n    }),\n    'Burn' : IDL.Record({\n      'from' : AccountIdentifier,\n      'amount' : Tokens,\n      'spender' : IDL.Opt(AccountIdentifier),\n    }),\n    'Mint' : IDL.Record({ 'to' : AccountIdentifier, 'amount' : Tokens }),\n    'Transfer' : IDL.Record({\n      'to' : AccountIdentifier,\n      'fee' : Tokens,\n      'from' : AccountIdentifier,\n      'amount' : Tokens,\n    }),\n    'TransferFrom' : IDL.Record({\n      'to' : AccountIdentifier,\n      'fee' : Tokens,\n      'from' : AccountIdentifier,\n      'amount' : Tokens,\n      'spender' : AccountIdentifier,\n    }),\n  });\n  const Transaction = IDL.Record({\n    'memo' : Memo,\n    'icrc1_memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'operation' : IDL.Opt(Operation),\n    'created_at_time' : TimeStamp,\n  });\n  const Block = IDL.Record({\n    'transaction' : Transaction,\n    'timestamp' : TimeStamp,\n    'parent_hash' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n  });\n  const BlockRange = IDL.Record({ 'blocks' : IDL.Vec(Block) });\n  const QueryArchiveError = IDL.Variant({\n    'BadFirstBlockIndex' : IDL.Record({\n      'requested_index' : BlockIndex,\n      'first_valid_index' : BlockIndex,\n    }),\n    'Other' : IDL.Record({\n      'error_message' : IDL.Text,\n      'error_code' : IDL.Nat64,\n    }),\n  });\n  const QueryArchiveResult = IDL.Variant({\n    'Ok' : BlockRange,\n    'Err' : QueryArchiveError,\n  });\n  const QueryArchiveFn = IDL.Func(\n      [GetBlocksArgs],\n      [QueryArchiveResult],\n      ['query'],\n    );\n  const ArchivedBlocksRange = IDL.Record({\n    'callback' : QueryArchiveFn,\n    'start' : BlockIndex,\n    'length' : IDL.Nat64,\n  });\n  const QueryBlocksResponse = IDL.Record({\n    'certificate' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'blocks' : IDL.Vec(Block),\n    'chain_length' : IDL.Nat64,\n    'first_block_index' : BlockIndex,\n    'archived_blocks' : IDL.Vec(ArchivedBlocksRange),\n  });\n  const ArchivedEncodedBlocksRange = IDL.Record({\n    'callback' : IDL.Func(\n        [GetBlocksArgs],\n        [\n          IDL.Variant({\n            'Ok' : IDL.Vec(IDL.Vec(IDL.Nat8)),\n            'Err' : QueryArchiveError,\n          }),\n        ],\n        ['query'],\n      ),\n    'start' : IDL.Nat64,\n    'length' : IDL.Nat64,\n  });\n  const QueryEncodedBlocksResponse = IDL.Record({\n    'certificate' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'blocks' : IDL.Vec(IDL.Vec(IDL.Nat8)),\n    'chain_length' : IDL.Nat64,\n    'first_block_index' : IDL.Nat64,\n    'archived_blocks' : IDL.Vec(ArchivedEncodedBlocksRange),\n  });\n  const SendArgs = IDL.Record({\n    'to' : TextAccountIdentifier,\n    'fee' : Tokens,\n    'memo' : Memo,\n    'from_subaccount' : IDL.Opt(SubAccount),\n    'created_at_time' : IDL.Opt(TimeStamp),\n    'amount' : Tokens,\n  });\n  const TransferArgs = IDL.Record({\n    'to' : AccountIdentifier,\n    'fee' : Tokens,\n    'memo' : Memo,\n    'from_subaccount' : IDL.Opt(SubAccount),\n    'created_at_time' : IDL.Opt(TimeStamp),\n    'amount' : Tokens,\n  });\n  const TransferError = IDL.Variant({\n    'TxTooOld' : IDL.Record({ 'allowed_window_nanos' : IDL.Nat64 }),\n    'BadFee' : IDL.Record({ 'expected_fee' : Tokens }),\n    'TxDuplicate' : IDL.Record({ 'duplicate_of' : BlockIndex }),\n    'TxCreatedInFuture' : IDL.Null,\n    'InsufficientFunds' : IDL.Record({ 'balance' : Tokens }),\n  });\n  const TransferResult = IDL.Variant({\n    'Ok' : BlockIndex,\n    'Err' : TransferError,\n  });\n  const TransferFeeArg = IDL.Record({});\n  const TransferFee = IDL.Record({ 'transfer_fee' : Tokens });\n  return IDL.Service({\n    'account_balance' : IDL.Func([AccountBalanceArgs], [Tokens], ['query']),\n    'account_balance_dfx' : IDL.Func(\n        [AccountBalanceArgsDfx],\n        [Tokens],\n        ['query'],\n      ),\n    'account_identifier' : IDL.Func([Account], [AccountIdentifier], ['query']),\n    'archives' : IDL.Func([], [Archives], ['query']),\n    'decimals' : IDL.Func(\n        [],\n        [IDL.Record({ 'decimals' : IDL.Nat32 })],\n        ['query'],\n      ),\n    'icrc1_balance_of' : IDL.Func([Account], [Icrc1Tokens], ['query']),\n    'icrc1_decimals' : IDL.Func([], [IDL.Nat8], ['query']),\n    'icrc1_fee' : IDL.Func([], [Icrc1Tokens], ['query']),\n    'icrc1_metadata' : IDL.Func(\n        [],\n        [IDL.Vec(IDL.Tuple(IDL.Text, Value))],\n        ['query'],\n      ),\n    'icrc1_minting_account' : IDL.Func([], [IDL.Opt(Account)], ['query']),\n    'icrc1_name' : IDL.Func([], [IDL.Text], ['query']),\n    'icrc1_supported_standards' : IDL.Func(\n        [],\n        [IDL.Vec(IDL.Record({ 'url' : IDL.Text, 'name' : IDL.Text }))],\n        ['query'],\n      ),\n    'icrc1_symbol' : IDL.Func([], [IDL.Text], ['query']),\n    'icrc1_total_supply' : IDL.Func([], [Icrc1Tokens], ['query']),\n    'icrc1_transfer' : IDL.Func([TransferArg], [Icrc1TransferResult], []),\n    'icrc2_allowance' : IDL.Func([AllowanceArgs], [Allowance], ['query']),\n    'icrc2_approve' : IDL.Func([ApproveArgs], [ApproveResult], []),\n    'name' : IDL.Func([], [IDL.Record({ 'name' : IDL.Text })], ['query']),\n    'query_blocks' : IDL.Func(\n        [GetBlocksArgs],\n        [QueryBlocksResponse],\n        ['query'],\n      ),\n    'query_encoded_blocks' : IDL.Func(\n        [GetBlocksArgs],\n        [QueryEncodedBlocksResponse],\n        ['query'],\n      ),\n    'send_dfx' : IDL.Func([SendArgs], [BlockIndex], []),\n    'symbol' : IDL.Func([], [IDL.Record({ 'symbol' : IDL.Text })], ['query']),\n    'transfer' : IDL.Func([TransferArgs], [TransferResult], []),\n    'transfer_fee' : IDL.Func([TransferFeeArg], [TransferFee], ['query']),\n  });\n};\nexport const init = ({ IDL }) => {\n  const SubAccount = IDL.Vec(IDL.Nat8);\n  const Account = IDL.Record({\n    'owner' : IDL.Principal,\n    'subaccount' : IDL.Opt(SubAccount),\n  });\n  const FeatureFlags = IDL.Record({ 'icrc2' : IDL.Bool });\n  const UpgradeArgs = IDL.Record({\n    'maximum_number_of_accounts' : IDL.Opt(IDL.Nat64),\n    'icrc1_minting_account' : IDL.Opt(Account),\n    'feature_flags' : IDL.Opt(FeatureFlags),\n  });\n  const Tokens = IDL.Record({ 'e8s' : IDL.Nat64 });\n  const TextAccountIdentifier = IDL.Text;\n  const Duration = IDL.Record({ 'secs' : IDL.Nat64, 'nanos' : IDL.Nat32 });\n  const ArchiveOptions = IDL.Record({\n    'num_blocks_to_archive' : IDL.Nat64,\n    'trigger_threshold' : IDL.Nat64,\n    'max_message_size_bytes' : IDL.Opt(IDL.Nat64),\n    'cycles_for_archive_creation' : IDL.Opt(IDL.Nat64),\n    'node_max_memory_size_bytes' : IDL.Opt(IDL.Nat64),\n    'controller_id' : IDL.Principal,\n  });\n  const InitArgs = IDL.Record({\n    'send_whitelist' : IDL.Vec(IDL.Principal),\n    'token_symbol' : IDL.Opt(IDL.Text),\n    'transfer_fee' : IDL.Opt(Tokens),\n    'minting_account' : TextAccountIdentifier,\n    'maximum_number_of_accounts' : IDL.Opt(IDL.Nat64),\n    'accounts_overflow_trim_quantity' : IDL.Opt(IDL.Nat64),\n    'transaction_window' : IDL.Opt(Duration),\n    'max_message_size_bytes' : IDL.Opt(IDL.Nat64),\n    'icrc1_minting_account' : IDL.Opt(Account),\n    'archive_options' : IDL.Opt(ArchiveOptions),\n    'initial_values' : IDL.Vec(IDL.Tuple(TextAccountIdentifier, Tokens)),\n    'token_name' : IDL.Opt(IDL.Text),\n    'feature_flags' : IDL.Opt(FeatureFlags),\n  });\n  const LedgerCanisterPayload = IDL.Variant({\n    'Upgrade' : IDL.Opt(UpgradeArgs),\n    'Init' : InitArgs,\n  });\n  return [LedgerCanisterPayload];\n};\n", "import type { ICPTs, Subaccount } from \"@dfinity/nns-proto\";\nimport { arrayOfNumberToUint8Array, toNullable } from \"@dfinity/utils\";\nimport type {\n  TransferArg as Icrc1TransferRawRequest,\n  Tokens,\n  TransferArgs as TransferRawRequest,\n} from \"../../../candid/ledger\";\nimport { TRANSACTION_FEE } from \"../../constants/constants\";\nimport type {\n  Icrc1TransferRequest,\n  TransferRequest,\n} from \"../../types/ledger_converters\";\nimport { importNnsProto } from \"../../utils/proto.utils\";\n\nexport const subAccountNumbersToSubaccount = async (\n  subAccountNumbers: number[],\n): Promise<Subaccount> => {\n  const bytes = new Uint8Array(subAccountNumbers).buffer;\n  const { Subaccount: SubaccountConstructor } = await importNnsProto();\n  const subaccount: Subaccount = new SubaccountConstructor();\n  subaccount.setSubAccount(new Uint8Array(bytes));\n  return subaccount;\n};\n\nexport const toICPTs = async (amount: bigint): Promise<ICPTs> => {\n  const { ICPTs: ICPTsConstructor } = await importNnsProto();\n  const result = new ICPTsConstructor();\n  result.setE8s(amount.toString(10));\n  return result;\n};\n\nconst e8sToTokens = (e8s: bigint): Tokens => ({ e8s });\n\nexport const toTransferRawRequest = ({\n  to,\n  amount,\n  memo,\n  fee,\n  fromSubAccount,\n  createdAt,\n}: TransferRequest): TransferRawRequest => ({\n  to: to.toUint8Array(),\n  fee: e8sToTokens(fee ?? TRANSACTION_FEE),\n  amount: e8sToTokens(amount),\n  // Always explicitly set the memo for compatibility with ledger wallet - hardware wallet\n  memo: memo ?? BigInt(0),\n  created_at_time:\n    createdAt !== undefined ? [{ timestamp_nanos: createdAt }] : [],\n  from_subaccount:\n    fromSubAccount === undefined\n      ? []\n      : [arrayOfNumberToUint8Array(fromSubAccount)],\n});\n\n// WARNING: When using the ICRC-1 interface of the ICP ledger, there is no\n// relationship between the memo and the icrc1Memo of a transaction. The ICRC-1\n// interface simply cannot set the memo field and the non-ICRC-1 interface\n// cannot set the icrc1Memo field, even though the icrc1Memo field is called\n// just \"memo\" in canister method params.\nexport const toIcrc1TransferRawRequest = ({\n  fromSubAccount,\n  to,\n  amount,\n  fee,\n  icrc1Memo,\n  createdAt,\n}: Icrc1TransferRequest): Icrc1TransferRawRequest => ({\n  to,\n  fee: toNullable(fee ?? TRANSACTION_FEE),\n  amount,\n  memo: toNullable(icrc1Memo),\n  created_at_time: toNullable(createdAt),\n  from_subaccount: toNullable(fromSubAccount),\n});\n", "export const SUB_ACCOUNT_BYTE_LENGTH = 32;\nexport const CREATE_CANISTER_MEMO = BigInt(0x41455243); // CREA,\nexport const TOP_UP_CANISTER_MEMO = BigInt(0x50555054); // TPUP\n\nexport const TRANSACTION_FEE = BigInt(10_000);\n\n// Note:  Canister IDs are not constant, so are not provided here.\n//        The same applies to HOST.\nexport const E8S_PER_TOKEN = BigInt(100000000);\n", "import type { Principal } from \"@dfinity/principal\";\nimport {\n  arrayOfNumberToUint8Array,\n  asciiStringToByteArray,\n  bigEndianCrc32,\n  uint8ArrayToHexString,\n} from \"@dfinity/utils\";\nimport { sha224 } from \"@noble/hashes/sha256\";\nimport { Buffer } from \"buffer\";\nimport type { AccountIdentifierHex } from \"../types/common\";\n\nexport const accountIdentifierToBytes = (\n  accountIdentifier: AccountIdentifierHex,\n): Uint8Array =>\n  Uint8Array.from(Buffer.from(accountIdentifier, \"hex\")).subarray(4);\n\nexport const accountIdentifierFromBytes = (\n  accountIdentifier: Uint8Array,\n): AccountIdentifierHex => Buffer.from(accountIdentifier).toString(\"hex\");\n\nexport const principalToAccountIdentifier = (\n  principal: Principal,\n  subAccount?: Uint8Array,\n): string => {\n  // Hash (sha224) the principal, the subAccount and some padding\n  const padding = asciiStringToByteArray(\"\\x0Aaccount-id\");\n\n  const shaObj = sha224.create();\n  shaObj.update(\n    arrayOfNumberToUint8Array([\n      ...padding,\n      ...principal.toUint8Array(),\n      ...(subAccount ?? Array(32).fill(0)),\n    ]),\n  );\n  const hash = shaObj.digest();\n\n  // Prepend the checksum of the hash and convert to a hex string\n  const checksum = bigEndianCrc32(hash);\n  const bytes = new Uint8Array([...checksum, ...hash]);\n  return uint8ArrayToHexString(bytes);\n};\n", "import { bigEndianCrc32 } from \"@dfinity/utils\";\nimport { InvalidAccountIDError } from \"../errors/ledger.errors\";\n\n/**\n * Checks account id check sum\n *\n * @throws InvalidAccountIDError\n */\nexport const checkAccountId = (accountId: string): void => {\n  // Verify the checksum of the given address.\n  if (accountId.length != 64) {\n    throw new InvalidAccountIDError(\n      `Invalid account identifier ${accountId}. The account identifier must be 64 chars in length.`,\n    );\n  }\n\n  const toAccountBytes = Buffer.from(accountId, \"hex\");\n  const foundChecksum = toAccountBytes.slice(0, 4);\n  const expectedCheckum = Buffer.from(bigEndianCrc32(toAccountBytes.slice(4)));\n  if (!expectedCheckum.equals(foundChecksum)) {\n    throw new InvalidAccountIDError(\n      `Account identifier ${accountId} has an invalid checksum. Are you sure the account identifier is correct?\\n\\nExpected checksum: ${expectedCheckum.toString(\n        \"hex\",\n      )}\\nFound checksum: ${foundChecksum.toString(\"hex\")}`,\n    );\n  }\n};\n"],
  "mappings": "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",
  "names": ["src_exports", "__export", "AccountIdentifier", "BadFeeError", "IndexCanister", "InsufficientFundsError", "InvalidAccountIDError", "InvalidSenderError", "LedgerCanister", "SubAccount", "TransferError", "TxCreatedInFutureError", "TxDuplicateError", "TxTooOldError", "accountIdentifierFromBytes", "accountIdentifierToBytes", "checkAccountId", "mapIcrc1TransferError", "mapTransferError", "mapTransferProtoError", "principalToAccountIdentifier", "__toCommonJS", "import_utils", "bytes", "b", "lengths", "exists", "instance", "checkFinished", "output", "out", "bytes", "min", "u8a", "a", "createView", "arr", "rotr", "word", "shift", "isLE", "utf8ToBytes", "str", "toBytes", "data", "u8a", "Hash", "toStr", "wrapConstructor", "hashCons", "hashC", "msg", "toBytes", "tmp", "setBigUint64", "view", "byteOffset", "value", "isLE", "_32n", "_u32_max", "wh", "wl", "h", "l", "SHA2", "Hash", "blockLen", "outputLen", "padOffset", "createView", "data", "exists", "buffer", "toBytes", "len", "pos", "take", "dataView", "out", "output", "i", "oview", "outLen", "state", "res", "to", "length", "finished", "destroyed", "Chi", "a", "b", "c", "Maj", "SHA256_K", "IV", "SHA256_W", "SHA256", "SHA2", "A", "B", "C", "D", "E", "F", "G", "H", "view", "offset", "i", "W15", "W2", "s0", "rotr", "s1", "sigma1", "T1", "T2", "SHA224", "sha224", "wrapConstructor", "SHA224", "import_agent", "importNnsProto", "updateCall", "agent", "canisterId", "methodName", "arg", "submitResponse", "blob", "queryCall", "queryResponse", "AccountIdentifier", "_AccountIdentifier", "bytes", "hex", "principal", "subAccount", "SubAccount", "padding", "shaObj", "sha224", "hash", "checksum", "AccountIdentifierConstructor", "importNnsProto", "accountIdentifier", "_SubAccount", "principalBytes", "i", "id", "import_utils", "TransferError", "InvalidSenderError", "InvalidAccountIDError", "InsufficientFundsError", "balance", "TxTooOldError", "allowed_window_secs", "TxCreatedInFutureError", "TxDuplicateError", "duplicateOf", "BadFeeError", "expectedFee", "mapTransferError", "rawTransferError", "mapIcrc1TransferError", "mapTransferProtoError", "responseBytes", "message", "m", "import_utils", "idlFactory", "IDL", "InitArg", "GetAccountIdentifierTransactionsArgs", "Tokens", "TimeStamp", "Operation", "Transaction", "TransactionWithId", "GetAccountIdentifierTransactionsResponse", "GetAccountIdentifierTransactionsError", "GetAccountIdentifierTransactionsResult", "Account", "GetAccountTransactionsArgs", "GetBlocksRequest", "GetBlocksResponse", "HttpRequest", "HttpResponse", "Status", "idlFactory", "IDL", "InitArg", "GetAccountIdentifierTransactionsArgs", "Tokens", "TimeStamp", "Operation", "Transaction", "TransactionWithId", "GetAccountIdentifierTransactionsResponse", "GetAccountIdentifierTransactionsError", "GetAccountIdentifierTransactionsResult", "Account", "GetAccountTransactionsArgs", "GetBlocksRequest", "GetBlocksResponse", "HttpRequest", "HttpResponse", "Status", "import_principal", "MAINNET_LEDGER_CANISTER_ID", "MAINNET_INDEX_CANISTER_ID", "IndexError", "paramToAccountIdentifier", "param", "AccountIdentifier", "paramToAccountIdentifierHex", "IndexCanister", "_IndexCanister", "certified", "accountIdentifier", "paramToAccountIdentifierHex", "start", "max_results", "response", "IndexError", "optionsCanisterId", "options", "service", "certifiedService", "canisterId", "MAINNET_INDEX_CANISTER_ID", "idlFactory", "import_utils", "idlFactory", "IDL", "SubAccount", "Account", "FeatureFlags", "UpgradeArgs", "Tokens", "TextAccountIdentifier", "Duration", "ArchiveOptions", "InitArgs", "LedgerCanisterPayload", "BlockIndex", "GetBlocksArgs", "Memo", "AccountIdentifier", "TimeStamp", "Operation", "Transaction", "Block", "BlockRange", "QueryArchiveError", "QueryArchiveResult", "QueryArchiveFn", "ArchivedBlocksRange", "QueryBlocksResponse", "ArchivedEncodedBlocksRange", "QueryEncodedBlocksResponse", "AccountBalanceArgs", "AccountBalanceArgsDfx", "Archive", "Archives", "Icrc1Tokens", "Value", "Icrc1Timestamp", "TransferArg", "Icrc1BlockIndex", "Icrc1TransferError", "Icrc1TransferResult", "AllowanceArgs", "Allowance", "ApproveArgs", "ApproveError", "ApproveResult", "SendArgs", "TransferArgs", "TransferError", "TransferResult", "TransferFeeArg", "TransferFee", "idlFactory", "IDL", "SubAccount", "Account", "FeatureFlags", "UpgradeArgs", "Tokens", "TextAccountIdentifier", "Duration", "ArchiveOptions", "InitArgs", "LedgerCanisterPayload", "AccountIdentifier", "AccountBalanceArgs", "AccountBalanceArgsDfx", "Archive", "Archives", "Icrc1Tokens", "Value", "Icrc1Timestamp", "TransferArg", "Icrc1BlockIndex", "Icrc1TransferError", "Icrc1TransferResult", "AllowanceArgs", "TimeStamp", "Allowance", "ApproveArgs", "ApproveError", "ApproveResult", "BlockIndex", "GetBlocksArgs", "Memo", "Operation", "Transaction", "Block", "BlockRange", "QueryArchiveError", "QueryArchiveResult", "QueryArchiveFn", "ArchivedBlocksRange", "QueryBlocksResponse", "ArchivedEncodedBlocksRange", "QueryEncodedBlocksResponse", "SendArgs", "TransferArgs", "TransferError", "TransferResult", "TransferFeeArg", "TransferFee", "import_utils", "CREATE_CANISTER_MEMO", "TOP_UP_CANISTER_MEMO", "TRANSACTION_FEE", "E8S_PER_TOKEN", "subAccountNumbersToSubaccount", "subAccountNumbers", "bytes", "SubaccountConstructor", "importNnsProto", "subaccount", "toICPTs", "amount", "ICPTsConstructor", "result", "e8sToTokens", "e8s", "toTransferRawRequest", "to", "memo", "fee", "fromSubAccount", "createdAt", "TRANSACTION_FEE", "toIcrc1TransferRawRequest", "icrc1Memo", "LedgerCanister", "_LedgerCanister", "agent", "canisterId", "service", "certifiedService", "updateFetcher", "queryFetcher", "hardwareWallet", "accountIdentifierParam", "certified", "accountIdentifier", "paramToAccountIdentifier", "e8s", "request", "TRANSACTION_FEE", "rawRequest", "toTransferRawRequest", "response", "mapTransferError", "toIcrc1TransferRawRequest", "mapIcrc1TransferError", "callMethod", "AccountBalanceRequestConstructor", "ICPTs", "importNnsProto", "responseBytes", "to", "amount", "memo", "fee", "fromSubAccount", "createdAt", "SendRequest", "Payment", "Memo", "TimeStamp", "BlockHeight", "payment", "toICPTs", "requestMemo", "timestamp", "subAccountNumbersToSubaccount", "err", "mapTransferProtoError", "options", "MAINNET_LEDGER_CANISTER_ID", "idlFactory", "updateCall", "queryCall", "import_utils", "import_buffer", "accountIdentifierToBytes", "accountIdentifier", "accountIdentifierFromBytes", "principalToAccountIdentifier", "principal", "subAccount", "padding", "shaObj", "sha224", "hash", "checksum", "bytes", "import_utils", "checkAccountId", "accountId", "InvalidAccountIDError", "toAccountBytes", "foundChecksum", "expectedCheckum"]
}
