import type { BlockHeight } from "./types/common";
import type { LedgerCanisterOptions } from "./types/ledger.options";
import type { AccountBalanceParams } from "./types/ledger.params";
import type { Icrc1TransferRequest, TransferRequest } from "./types/ledger_converters";
export declare class LedgerCanister {
    private readonly agent;
    private readonly canisterId;
    private readonly service;
    private readonly certifiedService;
    private readonly updateFetcher;
    private readonly queryFetcher;
    private readonly hardwareWallet;
    private constructor();
    static create(options?: LedgerCanisterOptions): LedgerCanister;
    /**
     * Returns the balance of the specified account identifier.
     *
     * If `certified` is true, the request is fetched as an update call, otherwise
     * it is fetched using a query call.
     *
     * @param {AccountBalanceParams} params The parameters to get the balance of an account.
     * @param {AccountIdentifierParam} params.accountIdentifier The account identifier provided either as hex string or as an AccountIdentifier.
     * @param {boolean} params.certified query or update call.
     * @returns {Promise<bigint>} The balance of the given account.
     * @throws {@link Error}
     */
    accountBalance: ({ accountIdentifier: accountIdentifierParam, certified, }: AccountBalanceParams) => Promise<bigint>;
    /**
     * Returns the transaction fee of the ledger canister
     * @returns {BigInt}
     */
    transactionFee: () => Promise<bigint>;
    /**
     * Transfer ICP from the caller to the destination `accountIdentifier`.
     * Returns the index of the block containing the tx if it was successful.
     *
     * @throws {@link TransferError}
     */
    transfer: (request: TransferRequest) => Promise<BlockHeight>;
    /**
     * Transfer ICP from the caller to the destination `Account`.
     * Returns the index of the block containing the tx if it was successful.
     *
     * @throws {@link TransferError}
     */
    icrc1Transfer: (request: Icrc1TransferRequest) => Promise<BlockHeight>;
    private accountBalanceHardwareWallet;
    private transferHardwareWallet;
}
