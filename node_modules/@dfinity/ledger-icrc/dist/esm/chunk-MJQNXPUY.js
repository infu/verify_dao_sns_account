import{Canister as V,createServices as y}from"@dfinity/utils";var A=({IDL:t})=>{let r=t.Record({ledger_id:t.Principal}),c=t.Nat,e=t.Record({owner:t.Principal,subaccount:t.Opt(t.Vec(t.Nat8))}),n=t.Record({max_results:t.Nat,start:t.Opt(c),account:e}),a=t.Record({from:e,memo:t.Opt(t.Vec(t.Nat8)),created_at_time:t.Opt(t.Nat64),amount:t.Nat,spender:t.Opt(e)}),i=t.Record({to:e,memo:t.Opt(t.Vec(t.Nat8)),created_at_time:t.Opt(t.Nat64),amount:t.Nat}),p=t.Record({fee:t.Opt(t.Nat),from:e,memo:t.Opt(t.Vec(t.Nat8)),created_at_time:t.Opt(t.Nat64),amount:t.Nat,expected_allowance:t.Opt(t.Nat),expires_at:t.Opt(t.Nat64),spender:e}),d=t.Record({to:e,fee:t.Opt(t.Nat),from:e,memo:t.Opt(t.Vec(t.Nat8)),created_at_time:t.Opt(t.Nat64),amount:t.Nat,spender:t.Opt(e)}),m=t.Record({burn:t.Opt(a),kind:t.Text,mint:t.Opt(i),approve:t.Opt(p),timestamp:t.Nat64,transfer:t.Opt(d)}),u=t.Record({id:c,transaction:m}),O=t.Record({transactions:t.Vec(u),oldest_tx_id:t.Opt(c)}),N=t.Record({message:t.Text}),_=t.Variant({Ok:O,Err:N}),o=t.Vec(t.Nat8),l=t.Record({owner:t.Principal,start:t.Opt(o)});return t.Service({get_account_transactions:t.Func([n],[_],[]),ledger_id:t.Func([],[t.Principal],[]),list_subaccounts:t.Func([l],[t.Vec(o)],[])})};var T=({IDL:t})=>{let r=t.Record({ledger_id:t.Principal}),c=t.Nat,e=t.Record({owner:t.Principal,subaccount:t.Opt(t.Vec(t.Nat8))}),n=t.Record({max_results:t.Nat,start:t.Opt(c),account:e}),a=t.Record({from:e,memo:t.Opt(t.Vec(t.Nat8)),created_at_time:t.Opt(t.Nat64),amount:t.Nat,spender:t.Opt(e)}),i=t.Record({to:e,memo:t.Opt(t.Vec(t.Nat8)),created_at_time:t.Opt(t.Nat64),amount:t.Nat}),p=t.Record({fee:t.Opt(t.Nat),from:e,memo:t.Opt(t.Vec(t.Nat8)),created_at_time:t.Opt(t.Nat64),amount:t.Nat,expected_allowance:t.Opt(t.Nat),expires_at:t.Opt(t.Nat64),spender:e}),d=t.Record({to:e,fee:t.Opt(t.Nat),from:e,memo:t.Opt(t.Vec(t.Nat8)),created_at_time:t.Opt(t.Nat64),amount:t.Nat,spender:t.Opt(e)}),m=t.Record({burn:t.Opt(a),kind:t.Text,mint:t.Opt(i),approve:t.Opt(p),timestamp:t.Nat64,transfer:t.Opt(d)}),u=t.Record({id:c,transaction:m}),O=t.Record({transactions:t.Vec(u),oldest_tx_id:t.Opt(c)}),N=t.Record({message:t.Text}),_=t.Variant({Ok:O,Err:N}),o=t.Vec(t.Nat8),l=t.Record({owner:t.Principal,start:t.Opt(o)});return t.Service({get_account_transactions:t.Func([n],[_],[]),ledger_id:t.Func([],[t.Principal],["query"]),list_subaccounts:t.Func([l],[t.Vec(o)],["query"])})};import{toNullable as f}from"@dfinity/utils";var R=({owner:t,subaccount:r})=>({owner:t,subaccount:f(r)}),g=({account:t,max_results:r,start:c})=>({account:R(t),max_results:r,start:f(c)});var s=class extends Error{};var x=class t extends V{constructor(){super(...arguments);this.getTransactions=async c=>{let e=await this.caller({certified:!0}).get_account_transactions(g(c));if("Err"in e)throw new s(e.Err.message);return e.Ok}}static create(c){let{service:e,certifiedService:n,canisterId:a}=y({options:c,idlFactory:T,certifiedIdlFactory:A});return new t(a,e,n)}};export{s as a,x as b};
//# sourceMappingURL=chunk-MJQNXPUY.js.map
