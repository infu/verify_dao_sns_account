import{Canister as $,createServices as I,toNullable as L}from"@dfinity/utils";var H=({IDL:e})=>{let s=e.Rec(),r=e.Variant({Int:e.Int,Nat:e.Nat,Blob:e.Vec(e.Nat8),Text:e.Text}),a=e.Vec(e.Nat8),t=e.Record({owner:e.Principal,subaccount:e.Opt(a)}),l=e.Variant({SetTo:t,Unset:e.Null}),p=e.Record({icrc2:e.Bool}),O=e.Record({token_symbol:e.Opt(e.Text),transfer_fee:e.Opt(e.Nat),metadata:e.Opt(e.Vec(e.Tuple(e.Text,r))),maximum_number_of_accounts:e.Opt(e.Nat64),accounts_overflow_trim_quantity:e.Opt(e.Nat64),change_fee_collector:e.Opt(l),max_memo_length:e.Opt(e.Nat16),token_name:e.Opt(e.Text),feature_flags:e.Opt(p)}),g=e.Record({decimals:e.Opt(e.Nat8),token_symbol:e.Text,transfer_fee:e.Nat,metadata:e.Vec(e.Tuple(e.Text,r)),minting_account:t,initial_balances:e.Vec(e.Tuple(t,e.Nat)),maximum_number_of_accounts:e.Opt(e.Nat64),accounts_overflow_trim_quantity:e.Opt(e.Nat64),fee_collector_account:e.Opt(t),archive_options:e.Record({num_blocks_to_archive:e.Nat64,max_transactions_per_response:e.Opt(e.Nat64),trigger_threshold:e.Nat64,max_message_size_bytes:e.Opt(e.Nat64),cycles_for_archive_creation:e.Opt(e.Nat64),node_max_memory_size_bytes:e.Opt(e.Nat64),controller_id:e.Principal}),max_memo_length:e.Opt(e.Nat16),token_name:e.Text,feature_flags:e.Opt(p)}),Z=e.Variant({Upgrade:e.Opt(O),Init:g}),n=e.Nat,u=e.Record({start:n,length:e.Nat}),T=e.Vec(e.Tuple(e.Text,s));s.fill(e.Variant({Int:e.Int,Map:T,Nat:e.Nat,Nat64:e.Nat64,Blob:e.Vec(e.Nat8),Text:e.Text,Array:e.Vec(s)}));let d=s,x=e.Record({blocks:e.Vec(d)}),R=e.Func([u],[x],[]),V=e.Record({certificate:e.Opt(e.Vec(e.Nat8)),first_index:n,blocks:e.Vec(d),chain_length:e.Nat64,archived_blocks:e.Vec(e.Record({callback:R,start:n,length:e.Nat}))}),b=e.Record({certificate:e.Opt(e.Vec(e.Nat8)),hash_tree:e.Vec(e.Nat8)}),_=e.Nat,f=e.Record({start:_,length:e.Nat}),c=e.Nat64,y=e.Record({from:t,memo:e.Opt(e.Vec(e.Nat8)),created_at_time:e.Opt(c),amount:e.Nat,spender:e.Opt(t)}),F=e.Record({to:t,memo:e.Opt(e.Vec(e.Nat8)),created_at_time:e.Opt(c),amount:e.Nat}),h=e.Record({fee:e.Opt(e.Nat),from:t,memo:e.Opt(e.Vec(e.Nat8)),created_at_time:e.Opt(c),amount:e.Nat,expected_allowance:e.Opt(e.Nat),expires_at:e.Opt(c),spender:t}),A=e.Record({to:t,fee:e.Opt(e.Nat),from:t,memo:e.Opt(e.Vec(e.Nat8)),created_at_time:e.Opt(c),amount:e.Nat,spender:e.Opt(t)}),N=e.Record({burn:e.Opt(y),kind:e.Text,mint:e.Opt(F),approve:e.Opt(h),timestamp:c,transfer:e.Opt(A)}),k=e.Record({transactions:e.Vec(N)}),v=e.Func([f],[k],[]),w=e.Record({first_index:_,log_length:e.Nat,transactions:e.Vec(N),archived_transactions:e.Vec(e.Record({callback:v,start:_,length:e.Nat}))}),o=e.Nat,B=e.Record({url:e.Text,name:e.Text}),P=e.Record({to:t,fee:e.Opt(o),memo:e.Opt(e.Vec(e.Nat8)),from_subaccount:e.Opt(a),created_at_time:e.Opt(c),amount:o}),E=e.Variant({GenericError:e.Record({message:e.Text,error_code:e.Nat}),TemporarilyUnavailable:e.Null,BadBurn:e.Record({min_burn_amount:o}),Duplicate:e.Record({duplicate_of:n}),BadFee:e.Record({expected_fee:o}),CreatedInFuture:e.Record({ledger_time:c}),TooOld:e.Null,InsufficientFunds:e.Record({balance:o})}),q=e.Variant({Ok:n,Err:E}),C=e.Record({account:t,spender:t}),S=e.Record({allowance:e.Nat,expires_at:e.Opt(c)}),U=e.Record({fee:e.Opt(e.Nat),memo:e.Opt(e.Vec(e.Nat8)),from_subaccount:e.Opt(e.Vec(e.Nat8)),created_at_time:e.Opt(c),amount:e.Nat,expected_allowance:e.Opt(e.Nat),expires_at:e.Opt(c),spender:t}),G=e.Variant({GenericError:e.Record({message:e.Text,error_code:e.Nat}),TemporarilyUnavailable:e.Null,Duplicate:e.Record({duplicate_of:n}),BadFee:e.Record({expected_fee:e.Nat}),AllowanceChanged:e.Record({current_allowance:e.Nat}),CreatedInFuture:e.Record({ledger_time:c}),TooOld:e.Null,Expired:e.Record({ledger_time:c}),InsufficientFunds:e.Record({balance:e.Nat})}),M=e.Variant({Ok:n,Err:G}),z=e.Record({to:t,fee:e.Opt(o),spender_subaccount:e.Opt(a),from:t,memo:e.Opt(e.Vec(e.Nat8)),created_at_time:e.Opt(c),amount:o}),Q=e.Variant({GenericError:e.Record({message:e.Text,error_code:e.Nat}),TemporarilyUnavailable:e.Null,InsufficientAllowance:e.Record({allowance:o}),BadBurn:e.Record({min_burn_amount:o}),Duplicate:e.Record({duplicate_of:n}),BadFee:e.Record({expected_fee:o}),CreatedInFuture:e.Record({ledger_time:c}),TooOld:e.Null,InsufficientFunds:e.Record({balance:o})}),j=e.Variant({Ok:n,Err:Q});return e.Service({get_blocks:e.Func([u],[V],[]),get_data_certificate:e.Func([],[b],[]),get_transactions:e.Func([f],[w],[]),icrc1_balance_of:e.Func([t],[o],[]),icrc1_decimals:e.Func([],[e.Nat8],[]),icrc1_fee:e.Func([],[o],[]),icrc1_metadata:e.Func([],[e.Vec(e.Tuple(e.Text,r))],[]),icrc1_minting_account:e.Func([],[e.Opt(t)],[]),icrc1_name:e.Func([],[e.Text],[]),icrc1_supported_standards:e.Func([],[e.Vec(B)],[]),icrc1_symbol:e.Func([],[e.Text],[]),icrc1_total_supply:e.Func([],[o],[]),icrc1_transfer:e.Func([P],[q],[]),icrc2_allowance:e.Func([C],[S],[]),icrc2_approve:e.Func([U],[M],[]),icrc2_transfer_from:e.Func([z],[j],[])})};var J=({IDL:e})=>{let s=e.Rec(),r=e.Variant({Int:e.Int,Nat:e.Nat,Blob:e.Vec(e.Nat8),Text:e.Text}),a=e.Vec(e.Nat8),t=e.Record({owner:e.Principal,subaccount:e.Opt(a)}),l=e.Variant({SetTo:t,Unset:e.Null}),p=e.Record({icrc2:e.Bool}),O=e.Record({token_symbol:e.Opt(e.Text),transfer_fee:e.Opt(e.Nat),metadata:e.Opt(e.Vec(e.Tuple(e.Text,r))),maximum_number_of_accounts:e.Opt(e.Nat64),accounts_overflow_trim_quantity:e.Opt(e.Nat64),change_fee_collector:e.Opt(l),max_memo_length:e.Opt(e.Nat16),token_name:e.Opt(e.Text),feature_flags:e.Opt(p)}),g=e.Record({decimals:e.Opt(e.Nat8),token_symbol:e.Text,transfer_fee:e.Nat,metadata:e.Vec(e.Tuple(e.Text,r)),minting_account:t,initial_balances:e.Vec(e.Tuple(t,e.Nat)),maximum_number_of_accounts:e.Opt(e.Nat64),accounts_overflow_trim_quantity:e.Opt(e.Nat64),fee_collector_account:e.Opt(t),archive_options:e.Record({num_blocks_to_archive:e.Nat64,max_transactions_per_response:e.Opt(e.Nat64),trigger_threshold:e.Nat64,max_message_size_bytes:e.Opt(e.Nat64),cycles_for_archive_creation:e.Opt(e.Nat64),node_max_memory_size_bytes:e.Opt(e.Nat64),controller_id:e.Principal}),max_memo_length:e.Opt(e.Nat16),token_name:e.Text,feature_flags:e.Opt(p)}),Z=e.Variant({Upgrade:e.Opt(O),Init:g}),n=e.Nat,u=e.Record({start:n,length:e.Nat}),T=e.Vec(e.Tuple(e.Text,s));s.fill(e.Variant({Int:e.Int,Map:T,Nat:e.Nat,Nat64:e.Nat64,Blob:e.Vec(e.Nat8),Text:e.Text,Array:e.Vec(s)}));let d=s,x=e.Record({blocks:e.Vec(d)}),R=e.Func([u],[x],["query"]),V=e.Record({certificate:e.Opt(e.Vec(e.Nat8)),first_index:n,blocks:e.Vec(d),chain_length:e.Nat64,archived_blocks:e.Vec(e.Record({callback:R,start:n,length:e.Nat}))}),b=e.Record({certificate:e.Opt(e.Vec(e.Nat8)),hash_tree:e.Vec(e.Nat8)}),_=e.Nat,f=e.Record({start:_,length:e.Nat}),c=e.Nat64,y=e.Record({from:t,memo:e.Opt(e.Vec(e.Nat8)),created_at_time:e.Opt(c),amount:e.Nat,spender:e.Opt(t)}),F=e.Record({to:t,memo:e.Opt(e.Vec(e.Nat8)),created_at_time:e.Opt(c),amount:e.Nat}),h=e.Record({fee:e.Opt(e.Nat),from:t,memo:e.Opt(e.Vec(e.Nat8)),created_at_time:e.Opt(c),amount:e.Nat,expected_allowance:e.Opt(e.Nat),expires_at:e.Opt(c),spender:t}),A=e.Record({to:t,fee:e.Opt(e.Nat),from:t,memo:e.Opt(e.Vec(e.Nat8)),created_at_time:e.Opt(c),amount:e.Nat,spender:e.Opt(t)}),N=e.Record({burn:e.Opt(y),kind:e.Text,mint:e.Opt(F),approve:e.Opt(h),timestamp:c,transfer:e.Opt(A)}),k=e.Record({transactions:e.Vec(N)}),v=e.Func([f],[k],["query"]),w=e.Record({first_index:_,log_length:e.Nat,transactions:e.Vec(N),archived_transactions:e.Vec(e.Record({callback:v,start:_,length:e.Nat}))}),o=e.Nat,B=e.Record({url:e.Text,name:e.Text}),P=e.Record({to:t,fee:e.Opt(o),memo:e.Opt(e.Vec(e.Nat8)),from_subaccount:e.Opt(a),created_at_time:e.Opt(c),amount:o}),E=e.Variant({GenericError:e.Record({message:e.Text,error_code:e.Nat}),TemporarilyUnavailable:e.Null,BadBurn:e.Record({min_burn_amount:o}),Duplicate:e.Record({duplicate_of:n}),BadFee:e.Record({expected_fee:o}),CreatedInFuture:e.Record({ledger_time:c}),TooOld:e.Null,InsufficientFunds:e.Record({balance:o})}),q=e.Variant({Ok:n,Err:E}),C=e.Record({account:t,spender:t}),S=e.Record({allowance:e.Nat,expires_at:e.Opt(c)}),U=e.Record({fee:e.Opt(e.Nat),memo:e.Opt(e.Vec(e.Nat8)),from_subaccount:e.Opt(e.Vec(e.Nat8)),created_at_time:e.Opt(c),amount:e.Nat,expected_allowance:e.Opt(e.Nat),expires_at:e.Opt(c),spender:t}),G=e.Variant({GenericError:e.Record({message:e.Text,error_code:e.Nat}),TemporarilyUnavailable:e.Null,Duplicate:e.Record({duplicate_of:n}),BadFee:e.Record({expected_fee:e.Nat}),AllowanceChanged:e.Record({current_allowance:e.Nat}),CreatedInFuture:e.Record({ledger_time:c}),TooOld:e.Null,Expired:e.Record({ledger_time:c}),InsufficientFunds:e.Record({balance:e.Nat})}),M=e.Variant({Ok:n,Err:G}),z=e.Record({to:t,fee:e.Opt(o),spender_subaccount:e.Opt(a),from:t,memo:e.Opt(e.Vec(e.Nat8)),created_at_time:e.Opt(c),amount:o}),Q=e.Variant({GenericError:e.Record({message:e.Text,error_code:e.Nat}),TemporarilyUnavailable:e.Null,InsufficientAllowance:e.Record({allowance:o}),BadBurn:e.Record({min_burn_amount:o}),Duplicate:e.Record({duplicate_of:n}),BadFee:e.Record({expected_fee:o}),CreatedInFuture:e.Record({ledger_time:c}),TooOld:e.Null,InsufficientFunds:e.Record({balance:o})}),j=e.Variant({Ok:n,Err:Q});return e.Service({get_blocks:e.Func([u],[V],["query"]),get_data_certificate:e.Func([],[b],["query"]),get_transactions:e.Func([f],[w],["query"]),icrc1_balance_of:e.Func([t],[o],["query"]),icrc1_decimals:e.Func([],[e.Nat8],["query"]),icrc1_fee:e.Func([],[o],["query"]),icrc1_metadata:e.Func([],[e.Vec(e.Tuple(e.Text,r))],["query"]),icrc1_minting_account:e.Func([],[e.Opt(t)],["query"]),icrc1_name:e.Func([],[e.Text],["query"]),icrc1_supported_standards:e.Func([],[e.Vec(B)],["query"]),icrc1_symbol:e.Func([],[e.Text],["query"]),icrc1_total_supply:e.Func([],[o],["query"]),icrc1_transfer:e.Func([P],[q],[]),icrc2_allowance:e.Func([C],[S],["query"]),icrc2_approve:e.Func([U],[M],[]),icrc2_transfer_from:e.Func([z],[j],[])})};import{toNullable as i}from"@dfinity/utils";var K=({from_subaccount:e,fee:s,created_at_time:r,memo:a,...t})=>({...t,fee:i(s),memo:i(a),from_subaccount:i(e),created_at_time:i(r)}),W=({spender_subaccount:e,fee:s,created_at_time:r,memo:a,...t})=>({...t,fee:i(s),memo:i(a),spender_subaccount:i(e),created_at_time:i(r)}),X=({fee:e,created_at_time:s,memo:r,from_subaccount:a,expected_allowance:t,expires_at:l,...p})=>({...p,fee:i(e),memo:i(r),from_subaccount:i(a),created_at_time:i(s),expected_allowance:i(t),expires_at:i(l)});var m=class extends Error{constructor({msg:r,errorType:a}){super(r);this.errorType=a}};var Y=class e extends ${constructor(){super(...arguments);this.metadata=r=>this.caller(r).icrc1_metadata();this.transactionFee=r=>this.caller(r).icrc1_fee();this.balance=r=>this.caller({certified:r.certified}).icrc1_balance_of({owner:r.owner,subaccount:L(r.subaccount)});this.transfer=async r=>{let a=await this.caller({certified:!0}).icrc1_transfer(K(r));if("Err"in a)throw new m({errorType:a.Err,msg:"Failed to transfer"});return a.Ok};this.totalTokensSupply=r=>this.caller(r).icrc1_total_supply();this.transferFrom=async r=>{let a=await this.caller({certified:!0}).icrc2_transfer_from(W(r));if("Err"in a)throw new m({errorType:a.Err,msg:"Failed to transfer from"});return a.Ok};this.approve=async r=>{let a=await this.caller({certified:!0}).icrc2_approve(X(r));if("Err"in a)throw new m({errorType:a.Err,msg:"Failed to entitle the spender to transfer the amount"});return a.Ok};this.allowance=async r=>{let{certified:a,...t}=r;return this.caller({certified:a}).icrc2_allowance({...t})}}static create(r){let{service:a,certifiedService:t,canisterId:l}=I({options:r,idlFactory:J,certifiedIdlFactory:H});return new e(l,a,t)}};export{m as a,Y as b};
//# sourceMappingURL=chunk-DXWXHYEN.js.map
